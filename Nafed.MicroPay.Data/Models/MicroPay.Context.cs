

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace Nafed.MicroPay.Data.Models
{

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;

using System.Data.Entity.Core.Objects;
using System.Linq;


public partial class MicroPayEntities : DbContext
{
    public MicroPayEntities()
        : base("name=MicroPayEntities")
    {

    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }


    public virtual DbSet<AcadmicProfessionalDetail> AcadmicProfessionalDetails { get; set; }

    public virtual DbSet<BloodGroup> BloodGroups { get; set; }

    public virtual DbSet<Branch> Branches { get; set; }

    public virtual DbSet<Cadre> Cadres { get; set; }

    public virtual DbSet<CalendarYear> CalendarYears { get; set; }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<City> Cities { get; set; }

    public virtual DbSet<Department> Departments { get; set; }

    public virtual DbSet<DepartmentRight> DepartmentRights { get; set; }

    public virtual DbSet<Division> Divisions { get; set; }

    public virtual DbSet<Docment> Docments { get; set; }

    public virtual DbSet<DocumentExtension> DocumentExtensions { get; set; }

    public virtual DbSet<EmailConfiguration> EmailConfigurations { get; set; }

    public virtual DbSet<EmployeeCategory> EmployeeCategories { get; set; }

    public virtual DbSet<EmployeeType> EmployeeTypes { get; set; }

    public virtual DbSet<Gender> Genders { get; set; }

    public virtual DbSet<Grade> Grades { get; set; }

    public virtual DbSet<LeavePurpose> LeavePurposes { get; set; }

    public virtual DbSet<LeaveRule> LeaveRules { get; set; }

    public virtual DbSet<MaritalStatu> MaritalStatus { get; set; }

    public virtual DbSet<Menu> Menus { get; set; }

    public virtual DbSet<MotherTongue> MotherTongues { get; set; }

    public virtual DbSet<ProcessStage> ProcessStages { get; set; }

    public virtual DbSet<Relation> Relations { get; set; }

    public virtual DbSet<Religion> Religions { get; set; }

    public virtual DbSet<Section> Sections { get; set; }

    public virtual DbSet<SMSConfiguration> SMSConfigurations { get; set; }

    public virtual DbSet<StaffGrievance> StaffGrievances { get; set; }

    public virtual DbSet<State> States { get; set; }

    public virtual DbSet<Title> Titles { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserRight> UserRights { get; set; }

    public virtual DbSet<UserType> UserTypes { get; set; }

    public virtual DbSet<ArrearDetail> ArrearDetails { get; set; }

    public virtual DbSet<AttendanceType> AttendanceTypes { get; set; }

    public virtual DbSet<Holiday> Holidays { get; set; }

    public virtual DbSet<LeaveStatu> LeaveStatus { get; set; }

    public virtual DbSet<EmployeeDeputation> EmployeeDeputations { get; set; }

    public virtual DbSet<tblMstBank> tblMstBanks { get; set; }

    public virtual DbSet<tblMstDailyWageRate> tblMstDailyWageRates { get; set; }

    public virtual DbSet<tblmstFDA> tblmstFDAs { get; set; }

    public virtual DbSet<tblMstHillComp> tblMstHillComps { get; set; }

    public virtual DbSet<tblOTARate> tblOTARates { get; set; }

    public virtual DbSet<tblWashingAllowance> tblWashingAllowances { get; set; }

    public virtual DbSet<tblCCAMaster> tblCCAMasters { get; set; }

    public virtual DbSet<tblCEARate> tblCEARates { get; set; }

    public virtual DbSet<TblHeadLookup> TblHeadLookups { get; set; }

    public virtual DbSet<tblLeaveUpdate> tblLeaveUpdates { get; set; }

    public virtual DbSet<tblMedicalLeaveUpdate> tblMedicalLeaveUpdates { get; set; }

    public virtual DbSet<tblLeaveBal> tblLeaveBals { get; set; }

    public virtual DbSet<SlabWiseHeadBreakup> SlabWiseHeadBreakups { get; set; }

    public virtual DbSet<EmpAttendanceDetail> EmpAttendanceDetails { get; set; }

    public virtual DbSet<FormGroupActivity> FormGroupActivities { get; set; }

    public virtual DbSet<FormGroupADetail1> FormGroupADetail1 { get; set; }

    public virtual DbSet<Mail_Process> Mail_Process { get; set; }

    public virtual DbSet<Mail_Process_Content> Mail_Process_Content { get; set; }

    public virtual DbSet<FormGroupADetail2> FormGroupADetail2 { get; set; }

    public virtual DbSet<FormGroupCDetail1> FormGroupCDetail1 { get; set; }

    public virtual DbSet<FormGroupCDetail2> FormGroupCDetail2 { get; set; }

    public virtual DbSet<LeaveType> LeaveTypes { get; set; }

    public virtual DbSet<Process> Processes { get; set; }

    public virtual DbSet<LeaveCreditRule> LeaveCreditRules { get; set; }

    public virtual DbSet<EmployeeLeave> EmployeeLeaves { get; set; }

    public virtual DbSet<FormGroupTrainingDtl> FormGroupTrainingDtls { get; set; }

    public virtual DbSet<FormGroupEDetail1> FormGroupEDetail1 { get; set; }

    public virtual DbSet<FormGroupEDetail2> FormGroupEDetail2 { get; set; }

    public virtual DbSet<FormGroupFDetail1> FormGroupFDetail1 { get; set; }

    public virtual DbSet<FormGroupFDetail2> FormGroupFDetail2 { get; set; }

    public virtual DbSet<FormGroupBDetail1> FormGroupBDetail1 { get; set; }

    public virtual DbSet<FormGroupBDetail2> FormGroupBDetail2 { get; set; }

    public virtual DbSet<LeaveCategory> LeaveCategories { get; set; }

    public virtual DbSet<EmployeeDependent> EmployeeDependents { get; set; }

    public virtual DbSet<EmployeeProcessApproval> EmployeeProcessApprovals { get; set; }

    public virtual DbSet<tblLastIncrementMonth> tblLastIncrementMonths { get; set; }

    public virtual DbSet<Skill> Skills { get; set; }

    public virtual DbSet<SkillType> SkillTypes { get; set; }

    public virtual DbSet<tblpromotion> tblpromotions { get; set; }

    public virtual DbSet<tblmsttransfer> tblmsttransfers { get; set; }

    public virtual DbSet<APARSkillSetDetail> APARSkillSetDetails { get; set; }

    public virtual DbSet<APARSkillSetFormHdr> APARSkillSetFormHdrs { get; set; }

    public virtual DbSet<tblBranchManagerDetail> tblBranchManagerDetails { get; set; }

    public virtual DbSet<ConfirmationForm> ConfirmationForms { get; set; }

    public virtual DbSet<tblPropertyReturn> tblPropertyReturns { get; set; }

    public virtual DbSet<CandidateGovtWorkExperience> CandidateGovtWorkExperiences { get; set; }

    public virtual DbSet<CandidateWorkExperience> CandidateWorkExperiences { get; set; }

    public virtual DbSet<JobRequirementLocation> JobRequirementLocations { get; set; }

    public virtual DbSet<Requirement> Requirements { get; set; }

    public virtual DbSet<JobRequirementQualification> JobRequirementQualifications { get; set; }

    public virtual DbSet<ExamCenterDetail> ExamCenterDetails { get; set; }

    public virtual DbSet<CandidateRegistration> CandidateRegistrations { get; set; }

    public virtual DbSet<CandidateEducationSummary> CandidateEducationSummaries { get; set; }

    public virtual DbSet<TrainingDocumentRepository> TrainingDocumentRepositories { get; set; }

    public virtual DbSet<TrainingParticipant> TrainingParticipants { get; set; }

    public virtual DbSet<TrainingPrerequisite> TrainingPrerequisites { get; set; }

    public virtual DbSet<TrainingFeedBackFormDtl> TrainingFeedBackFormDtls { get; set; }

    public virtual DbSet<TrainingFeedBackFormHdr> TrainingFeedBackFormHdrs { get; set; }

    public virtual DbSet<Training> Trainings { get; set; }

    public virtual DbSet<TrainingFeedbackDetail> TrainingFeedbackDetails { get; set; }

    public virtual DbSet<tblMstLoanType> tblMstLoanTypes { get; set; }

    public virtual DbSet<tblmstbankrate> tblmstbankrates { get; set; }

    public virtual DbSet<tblLoanAdjustOld> tblLoanAdjustOlds { get; set; }

    public virtual DbSet<APARSkillSet> APARSkillSets { get; set; }

    public virtual DbSet<tblFinalMonthlySalary> tblFinalMonthlySalaries { get; set; }

    public virtual DbSet<TBLMONTHLYINPUT> TBLMONTHLYINPUTs { get; set; }

    public virtual DbSet<tblLoanTran> tblLoanTrans { get; set; }

    public virtual DbSet<tblLeaveTran> tblLeaveTrans { get; set; }

    public virtual DbSet<tblEmployeeQualificationdetail> tblEmployeeQualificationdetails { get; set; }

    public virtual DbSet<DashboardDocumentHdr> DashboardDocumentHdrs { get; set; }

    public virtual DbSet<DashboardDocument> DashboardDocuments { get; set; }

    public virtual DbSet<TblArrearMonthlyInput> TblArrearMonthlyInputs { get; set; }

    public virtual DbSet<TblActualArrear> TblActualArrears { get; set; }

    public virtual DbSet<tblarrearmanualdata> tblarrearmanualdatas { get; set; }

    public virtual DbSet<FileTrackingType> FileTrackingTypes { get; set; }

    public virtual DbSet<FileTrackingDocument> FileTrackingDocuments { get; set; }

    public virtual DbSet<ProcessWorkFlow> ProcessWorkFlows { get; set; }

    public virtual DbSet<FileManagement> FileManagements { get; set; }

    public virtual DbSet<tblMstCity> tblMstCities { get; set; }

    public virtual DbSet<salaryheadshistory> salaryheadshistories { get; set; }

    public virtual DbSet<MonthlyTCSFile> MonthlyTCSFiles { get; set; }

    public virtual DbSet<SalaryHead> SalaryHeads { get; set; }

    public virtual DbSet<tblGisDeduction> tblGisDeductions { get; set; }

    public virtual DbSet<TblArrearDetail> TblArrearDetails { get; set; }

    public virtual DbSet<tblmstProjectedEmployeeSalary> tblmstProjectedEmployeeSalaries { get; set; }

    public virtual DbSet<TblMstEmployeeSalary> TblMstEmployeeSalaries { get; set; }

    public virtual DbSet<TBLGRATIADUMMY> TBLGRATIADUMMies { get; set; }

    public virtual DbSet<tblMstEmployee> tblMstEmployees { get; set; }

    public virtual DbSet<tblmstprojectedemployee> tblmstprojectedemployees { get; set; }

    public virtual DbSet<APARSkillSetFormDetail> APARSkillSetFormDetails { get; set; }

    public virtual DbSet<tblPFFlagStatu> tblPFFlagStatus { get; set; }

    public virtual DbSet<LoanApplication> LoanApplications { get; set; }

    public virtual DbSet<LoanApplicationHistory> LoanApplicationHistories { get; set; }

    public virtual DbSet<BonusMinimumMonthlyWage> BonusMinimumMonthlyWages { get; set; }

    public virtual DbSet<BonusWage> BonusWages { get; set; }

    public virtual DbSet<TblBonusAmt> TblBonusAmts { get; set; }

    public virtual DbSet<TblExGratia_Cal> TblExGratia_Cal { get; set; }

    public virtual DbSet<tblmstslab> tblmstslabs { get; set; }

    public virtual DbSet<OTASlip> OTASlips { get; set; }

    public virtual DbSet<EmployeeProvidentFundOrganisation> EmployeeProvidentFundOrganisations { get; set; }

    public virtual DbSet<tblMstLoanPriorityHistory> tblMstLoanPriorityHistories { get; set; }

    public virtual DbSet<BranchSalaryHeadRule> BranchSalaryHeadRules { get; set; }

    public virtual DbSet<tblMstLoanPriority> tblMstLoanPriorities { get; set; }

    public virtual DbSet<PayrollApprovalRequest> PayrollApprovalRequests { get; set; }

    public virtual DbSet<tblPropertyReturnHDR> tblPropertyReturnHDRs { get; set; }

    public virtual DbSet<EPFNomination> EPFNominations { get; set; }

    public virtual DbSet<EPFDetail> EPFDetails { get; set; }

    public virtual DbSet<ChildrenEducationDetail> ChildrenEducationDetails { get; set; }

    public virtual DbSet<ChildrenEducationDocument> ChildrenEducationDocuments { get; set; }

    public virtual DbSet<ConveyanceBillDescription> ConveyanceBillDescriptions { get; set; }

    public virtual DbSet<ConveyanceBillHdr> ConveyanceBillHdrs { get; set; }

    public virtual DbSet<TrainingTopic> TrainingTopics { get; set; }

    public virtual DbSet<Designation> Designations { get; set; }

    public virtual DbSet<tblStaffBudget> tblStaffBudgets { get; set; }

    public virtual DbSet<NonRefundablePFLoan> NonRefundablePFLoans { get; set; }

    public virtual DbSet<EmpPFOrgHDR> EmpPFOrgHDRs { get; set; }

    public virtual DbSet<EmpDeductionUnderChapterVI_A> EmpDeductionUnderChapterVI_A { get; set; }

    public virtual DbSet<EmployeeForm12BB> EmployeeForm12BB { get; set; }

    public virtual DbSet<EmployeeForm12BBDocument> EmployeeForm12BBDocument { get; set; }

    public virtual DbSet<DeductionSection> DeductionSections { get; set; }

    public virtual DbSet<DeductionSubSection> DeductionSubSections { get; set; }

    public virtual DbSet<DeductionSubSectionDescription> DeductionSubSectionDescriptions { get; set; }

    public virtual DbSet<ChildrenEducationHdr> ChildrenEducationHdrs { get; set; }

    public virtual DbSet<AssetType> AssetTypes { get; set; }

    public virtual DbSet<Manufacturer> Manufacturers { get; set; }

    public virtual DbSet<tblTDSTaxRulesSlab> tblTDSTaxRulesSlabs { get; set; }

    public virtual DbSet<InventoryManagement> InventoryManagements { get; set; }

    public virtual DbSet<AssetmanagementDetail> AssetmanagementDetails { get; set; }

    public virtual DbSet<ConveyanceBillHdrDetail> ConveyanceBillHdrDetails { get; set; }

    public virtual DbSet<NRPFLoanHDR> NRPFLoanHDRs { get; set; }

    public virtual DbSet<Trainer> Trainers { get; set; }

    public virtual DbSet<ConfirmationClarification> ConfirmationClarifications { get; set; }

    public virtual DbSet<ConfirmationFormAHeader> ConfirmationFormAHeaders { get; set; }

    public virtual DbSet<ConfirmationFormBHeader> ConfirmationFormBHeaders { get; set; }

    public virtual DbSet<ticket_status> ticket_status { get; set; }

    public virtual DbSet<ticket_type> ticket_type { get; set; }

    public virtual DbSet<ticket_priority> ticket_priority { get; set; }

    public virtual DbSet<EmployeeSuspensionPeriod> EmployeeSuspensionPeriods { get; set; }

    public virtual DbSet<AppraisalFormHistory> AppraisalFormHistories { get; set; }

    public virtual DbSet<tblMstLTC> tblMstLTCs { get; set; }

    public virtual DbSet<Support_group> Support_group { get; set; }

    public virtual DbSet<Support_team> Support_team { get; set; }

    public virtual DbSet<TicketWorkFlow> TicketWorkFlows { get; set; }

    public virtual DbSet<ticket> tickets { get; set; }

    public virtual DbSet<ticket_attachments> ticket_attachments { get; set; }

    public virtual DbSet<ConfirmationStatu> ConfirmationStatus { get; set; }

    public virtual DbSet<TrainingFeedbackFormat> TrainingFeedbackFormats { get; set; }

    public virtual DbSet<TrainingDateWiseTimeSlot> TrainingDateWiseTimeSlots { get; set; }

    public virtual DbSet<PayrollApprovalSetting> PayrollApprovalSettings { get; set; }

    public virtual DbSet<ConfirmationFormHdr> ConfirmationFormHdrs { get; set; }

    public virtual DbSet<FormGroupAHdr> FormGroupAHdrs { get; set; }

    public virtual DbSet<FormGroupBHdr> FormGroupBHdrs { get; set; }

    public virtual DbSet<FormGroupCHdr> FormGroupCHdrs { get; set; }

    public virtual DbSet<FormGroupDHdr> FormGroupDHdrs { get; set; }

    public virtual DbSet<FormGroupEHdr> FormGroupEHdrs { get; set; }

    public virtual DbSet<FormGroupFHdr> FormGroupFHdrs { get; set; }

    public virtual DbSet<FormGroupGHdr> FormGroupGHdrs { get; set; }

    public virtual DbSet<FormGroupHHdr> FormGroupHHdrs { get; set; }

    public virtual DbSet<AppraisalFormHdr> AppraisalFormHdrs { get; set; }

    public virtual DbSet<AppraisalForm> AppraisalForms { get; set; }

    public virtual DbSet<DesignationAppraisalForm> DesignationAppraisalForms { get; set; }

    public virtual DbSet<APARReviewedSignedCopy> APARReviewedSignedCopies { get; set; }

    public virtual DbSet<SubordinatesTraining> SubordinatesTrainings { get; set; }

    public virtual DbSet<EmployeeAchievement> EmployeeAchievements { get; set; }

    public virtual DbSet<EmployeeCertification> EmployeeCertifications { get; set; }

    public virtual DbSet<EmpAchievementAndCertificationDocument> EmpAchievementAndCertificationDocuments { get; set; }

    public virtual DbSet<EmpAttendanceHdr> EmpAttendanceHdrs { get; set; }

    public virtual DbSet<MaxEmpCodeTypeWise> MaxEmpCodeTypeWises { get; set; }

    public virtual DbSet<tblPFOpBalance> tblPFOpBalances { get; set; }

    public virtual DbSet<Insurance> Insurances { get; set; }

    public virtual DbSet<InsuranceDependent> InsuranceDependents { get; set; }

    public virtual DbSet<FTSUser> FTSUsers { get; set; }

    public virtual DbSet<FTSUserDepartment> FTSUserDepartments { get; set; }

    public virtual DbSet<SeparationClearance> SeparationClearances { get; set; }

    public virtual DbSet<Sepration> Seprations { get; set; }

    public virtual DbSet<Resignation> Resignations { get; set; }

    public virtual DbSet<UserLoginDetails> UserLoginDetails { get; set; }

    public virtual DbSet<InsufficientLoggingMonitoring> InsufficientLoggingMonitoring { get; set; }

    public virtual DbSet<TblPFOPBalanceManual> TblPFOPBalanceManual { get; set; }

    public virtual DbSet<promotioncota1> promotioncota1 { get; set; }

    public virtual DbSet<FileWorkflow> FileWorkflow { get; set; }

    public virtual DbSet<NREmployeesContractExtention> NREmployeesContractExtention { get; set; }

    public virtual DbSet<MailFailedLog> MailFailedLog { get; set; }

    public virtual DbSet<UpdatedTDSYearly> UpdatedTDSYearly { get; set; }


    public virtual ObjectResult<GetEmployeeDetails_Result> GetEmployeeDetails(string empCode, string empName, Nullable<int> empTypeID, Nullable<int> designationID)
    {

        var empCodeParameter = empCode != null ?
            new ObjectParameter("empCode", empCode) :
            new ObjectParameter("empCode", typeof(string));


        var empNameParameter = empName != null ?
            new ObjectParameter("empName", empName) :
            new ObjectParameter("empName", typeof(string));


        var empTypeIDParameter = empTypeID.HasValue ?
            new ObjectParameter("empTypeID", empTypeID) :
            new ObjectParameter("empTypeID", typeof(int));


        var designationIDParameter = designationID.HasValue ?
            new ObjectParameter("designationID", designationID) :
            new ObjectParameter("designationID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeDetails_Result>("GetEmployeeDetails", empCodeParameter, empNameParameter, empTypeIDParameter, designationIDParameter);
    }


    public virtual ObjectResult<GetEmployeeLeaveBal_Result> GetEmployeeLeaveBal(string empCode)
    {

        var empCodeParameter = empCode != null ?
            new ObjectParameter("empCode", empCode) :
            new ObjectParameter("empCode", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeLeaveBal_Result>("GetEmployeeLeaveBal", empCodeParameter);
    }


    public virtual ObjectResult<GetEmployeeDetailDashBoard_Result> GetEmployeeDetailDashBoard(Nullable<int> empID)
    {

        var empIDParameter = empID.HasValue ?
            new ObjectParameter("empID", empID) :
            new ObjectParameter("empID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeDetailDashBoard_Result>("GetEmployeeDetailDashBoard", empIDParameter);
    }


    public virtual ObjectResult<GetEmployeeDOBDOJ_Result> GetEmployeeDOBDOJ(Nullable<int> branchID, Nullable<System.DateTime> todayDate)
    {

        var branchIDParameter = branchID.HasValue ?
            new ObjectParameter("branchID", branchID) :
            new ObjectParameter("branchID", typeof(int));


        var todayDateParameter = todayDate.HasValue ?
            new ObjectParameter("todayDate", todayDate) :
            new ObjectParameter("todayDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeDOBDOJ_Result>("GetEmployeeDOBDOJ", branchIDParameter, todayDateParameter);
    }


    public virtual ObjectResult<GetFormGroupHdrDetail_Result> GetFormGroupHdrDetail(string tableName, Nullable<int> branchID, Nullable<int> employeeID, string reportingYear, Nullable<int> formID)
    {

        var tableNameParameter = tableName != null ?
            new ObjectParameter("tableName", tableName) :
            new ObjectParameter("tableName", typeof(string));


        var branchIDParameter = branchID.HasValue ?
            new ObjectParameter("branchID", branchID) :
            new ObjectParameter("branchID", typeof(int));


        var employeeIDParameter = employeeID.HasValue ?
            new ObjectParameter("employeeID", employeeID) :
            new ObjectParameter("employeeID", typeof(int));


        var reportingYearParameter = reportingYear != null ?
            new ObjectParameter("reportingYear", reportingYear) :
            new ObjectParameter("reportingYear", typeof(string));


        var formIDParameter = formID.HasValue ?
            new ObjectParameter("formID", formID) :
            new ObjectParameter("formID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFormGroupHdrDetail_Result>("GetFormGroupHdrDetail", tableNameParameter, branchIDParameter, employeeIDParameter, reportingYearParameter, formIDParameter);
    }


    public virtual ObjectResult<GetFormGroupDetail1_Result> GetFormGroupDetail1(string hdrtableName, string childtableName, Nullable<int> employeeID, Nullable<int> formGroupID)
    {

        var hdrtableNameParameter = hdrtableName != null ?
            new ObjectParameter("HdrtableName", hdrtableName) :
            new ObjectParameter("HdrtableName", typeof(string));


        var childtableNameParameter = childtableName != null ?
            new ObjectParameter("childtableName", childtableName) :
            new ObjectParameter("childtableName", typeof(string));


        var employeeIDParameter = employeeID.HasValue ?
            new ObjectParameter("employeeID", employeeID) :
            new ObjectParameter("employeeID", typeof(int));


        var formGroupIDParameter = formGroupID.HasValue ?
            new ObjectParameter("formGroupID", formGroupID) :
            new ObjectParameter("formGroupID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFormGroupDetail1_Result>("GetFormGroupDetail1", hdrtableNameParameter, childtableNameParameter, employeeIDParameter, formGroupIDParameter);
    }


    public virtual ObjectResult<GetFormGroupDetail2_Result> GetFormGroupDetail2(string hdrtableName, string childtableName, Nullable<int> employeeID, Nullable<int> formGroupID)
    {

        var hdrtableNameParameter = hdrtableName != null ?
            new ObjectParameter("HdrtableName", hdrtableName) :
            new ObjectParameter("HdrtableName", typeof(string));


        var childtableNameParameter = childtableName != null ?
            new ObjectParameter("childtableName", childtableName) :
            new ObjectParameter("childtableName", typeof(string));


        var employeeIDParameter = employeeID.HasValue ?
            new ObjectParameter("employeeID", employeeID) :
            new ObjectParameter("employeeID", typeof(int));


        var formGroupIDParameter = formGroupID.HasValue ?
            new ObjectParameter("formGroupID", formGroupID) :
            new ObjectParameter("formGroupID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFormGroupDetail2_Result>("GetFormGroupDetail2", hdrtableNameParameter, childtableNameParameter, employeeIDParameter, formGroupIDParameter);
    }


    public virtual ObjectResult<GetFormGroupHHdrDetail_Result> GetFormGroupHHdrDetail(string tableName, Nullable<int> branchID, Nullable<int> employeeID, string reportingYear, Nullable<int> formID)
    {

        var tableNameParameter = tableName != null ?
            new ObjectParameter("tableName", tableName) :
            new ObjectParameter("tableName", typeof(string));


        var branchIDParameter = branchID.HasValue ?
            new ObjectParameter("branchID", branchID) :
            new ObjectParameter("branchID", typeof(int));


        var employeeIDParameter = employeeID.HasValue ?
            new ObjectParameter("employeeID", employeeID) :
            new ObjectParameter("employeeID", typeof(int));


        var reportingYearParameter = reportingYear != null ?
            new ObjectParameter("reportingYear", reportingYear) :
            new ObjectParameter("reportingYear", typeof(string));


        var formIDParameter = formID.HasValue ?
            new ObjectParameter("formID", formID) :
            new ObjectParameter("formID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFormGroupHHdrDetail_Result>("GetFormGroupHHdrDetail", tableNameParameter, branchIDParameter, employeeIDParameter, reportingYearParameter, formIDParameter);
    }


    public virtual ObjectResult<GetDesignationPayScale_Result> GetDesignationPayScale(Nullable<int> designationID)
    {

        var designationIDParameter = designationID.HasValue ?
            new ObjectParameter("designationID", designationID) :
            new ObjectParameter("designationID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDesignationPayScale_Result>("GetDesignationPayScale", designationIDParameter);
    }


    public virtual ObjectResult<GetFormGroupGHdrDetail_Result> GetFormGroupGHdrDetail(string tableName, Nullable<int> branchID, Nullable<int> employeeID, string reportingYear, Nullable<int> formID)
    {

        var tableNameParameter = tableName != null ?
            new ObjectParameter("tableName", tableName) :
            new ObjectParameter("tableName", typeof(string));


        var branchIDParameter = branchID.HasValue ?
            new ObjectParameter("branchID", branchID) :
            new ObjectParameter("branchID", typeof(int));


        var employeeIDParameter = employeeID.HasValue ?
            new ObjectParameter("employeeID", employeeID) :
            new ObjectParameter("employeeID", typeof(int));


        var reportingYearParameter = reportingYear != null ?
            new ObjectParameter("reportingYear", reportingYear) :
            new ObjectParameter("reportingYear", typeof(string));


        var formIDParameter = formID.HasValue ?
            new ObjectParameter("formID", formID) :
            new ObjectParameter("formID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFormGroupGHdrDetail_Result>("GetFormGroupGHdrDetail", tableNameParameter, branchIDParameter, employeeIDParameter, reportingYearParameter, formIDParameter);
    }


    public virtual ObjectResult<GetFormGroupDHdrDetail_Result> GetFormGroupDHdrDetail(string tableName, Nullable<int> branchID, Nullable<int> employeeID, string reportingYear, Nullable<int> formID)
    {

        var tableNameParameter = tableName != null ?
            new ObjectParameter("tableName", tableName) :
            new ObjectParameter("tableName", typeof(string));


        var branchIDParameter = branchID.HasValue ?
            new ObjectParameter("branchID", branchID) :
            new ObjectParameter("branchID", typeof(int));


        var employeeIDParameter = employeeID.HasValue ?
            new ObjectParameter("employeeID", employeeID) :
            new ObjectParameter("employeeID", typeof(int));


        var reportingYearParameter = reportingYear != null ?
            new ObjectParameter("reportingYear", reportingYear) :
            new ObjectParameter("reportingYear", typeof(string));


        var formIDParameter = formID.HasValue ?
            new ObjectParameter("formID", formID) :
            new ObjectParameter("formID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFormGroupDHdrDetail_Result>("GetFormGroupDHdrDetail", tableNameParameter, branchIDParameter, employeeIDParameter, reportingYearParameter, formIDParameter);
    }


    public virtual ObjectResult<GetFormGroupFHdrDetail_Result> GetFormGroupFHdrDetail(string tableName, Nullable<int> branchID, Nullable<int> employeeID, string reportingYear, Nullable<int> formID)
    {

        var tableNameParameter = tableName != null ?
            new ObjectParameter("tableName", tableName) :
            new ObjectParameter("tableName", typeof(string));


        var branchIDParameter = branchID.HasValue ?
            new ObjectParameter("branchID", branchID) :
            new ObjectParameter("branchID", typeof(int));


        var employeeIDParameter = employeeID.HasValue ?
            new ObjectParameter("employeeID", employeeID) :
            new ObjectParameter("employeeID", typeof(int));


        var reportingYearParameter = reportingYear != null ?
            new ObjectParameter("reportingYear", reportingYear) :
            new ObjectParameter("reportingYear", typeof(string));


        var formIDParameter = formID.HasValue ?
            new ObjectParameter("formID", formID) :
            new ObjectParameter("formID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFormGroupFHdrDetail_Result>("GetFormGroupFHdrDetail", tableNameParameter, branchIDParameter, employeeIDParameter, reportingYearParameter, formIDParameter);
    }


    public virtual ObjectResult<GetEmployeePromotions_Result> GetEmployeePromotions(Nullable<int> employeeID, Nullable<int> transID)
    {

        var employeeIDParameter = employeeID.HasValue ?
            new ObjectParameter("employeeID", employeeID) :
            new ObjectParameter("employeeID", typeof(int));


        var transIDParameter = transID.HasValue ?
            new ObjectParameter("transID", transID) :
            new ObjectParameter("transID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeePromotions_Result>("GetEmployeePromotions", employeeIDParameter, transIDParameter);
    }


    public virtual ObjectResult<GetProjectedIncrementDetails_Result> GetProjectedIncrementDetails(Nullable<int> branchID, string employeeCode, string employeeName, Nullable<int> incrementMonth)
    {

        var branchIDParameter = branchID.HasValue ?
            new ObjectParameter("BranchID", branchID) :
            new ObjectParameter("BranchID", typeof(int));


        var employeeCodeParameter = employeeCode != null ?
            new ObjectParameter("EmployeeCode", employeeCode) :
            new ObjectParameter("EmployeeCode", typeof(string));


        var employeeNameParameter = employeeName != null ?
            new ObjectParameter("EmployeeName", employeeName) :
            new ObjectParameter("EmployeeName", typeof(string));


        var incrementMonthParameter = incrementMonth.HasValue ?
            new ObjectParameter("IncrementMonth", incrementMonth) :
            new ObjectParameter("IncrementMonth", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProjectedIncrementDetails_Result>("GetProjectedIncrementDetails", branchIDParameter, employeeCodeParameter, employeeNameParameter, incrementMonthParameter);
    }


    public virtual ObjectResult<GetValidateNewBasicAmountDetails_Result> GetValidateNewBasicAmountDetails(Nullable<int> employeeId, Nullable<int> incrementMonth)
    {

        var employeeIdParameter = employeeId.HasValue ?
            new ObjectParameter("EmployeeId", employeeId) :
            new ObjectParameter("EmployeeId", typeof(int));


        var incrementMonthParameter = incrementMonth.HasValue ?
            new ObjectParameter("IncrementMonth", incrementMonth) :
            new ObjectParameter("IncrementMonth", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetValidateNewBasicAmountDetails_Result>("GetValidateNewBasicAmountDetails", employeeIdParameter, incrementMonthParameter);
    }


    public virtual int sp_delProjectedcreated_table()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_delProjectedcreated_table");
    }


    public virtual int UpdateLeaveBalanceAsOfNow(string empCode, Nullable<decimal> eLBalance, Nullable<decimal> mLBalance, Nullable<decimal> cLBalance, Nullable<double> mLExtraBalance, string year)
    {

        var empCodeParameter = empCode != null ?
            new ObjectParameter("EmpCode", empCode) :
            new ObjectParameter("EmpCode", typeof(string));


        var eLBalanceParameter = eLBalance.HasValue ?
            new ObjectParameter("ELBalance", eLBalance) :
            new ObjectParameter("ELBalance", typeof(decimal));


        var mLBalanceParameter = mLBalance.HasValue ?
            new ObjectParameter("MLBalance", mLBalance) :
            new ObjectParameter("MLBalance", typeof(decimal));


        var cLBalanceParameter = cLBalance.HasValue ?
            new ObjectParameter("CLBalance", cLBalance) :
            new ObjectParameter("CLBalance", typeof(decimal));


        var mLExtraBalanceParameter = mLExtraBalance.HasValue ?
            new ObjectParameter("MLExtraBalance", mLExtraBalance) :
            new ObjectParameter("MLExtraBalance", typeof(double));


        var yearParameter = year != null ?
            new ObjectParameter("Year", year) :
            new ObjectParameter("Year", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateLeaveBalanceAsOfNow", empCodeParameter, eLBalanceParameter, mLBalanceParameter, cLBalanceParameter, mLExtraBalanceParameter, yearParameter);
    }


    public virtual ObjectResult<GetUnMappedEmployeeList_Result> GetUnMappedEmployeeList(Nullable<int> branchID)
    {

        var branchIDParameter = branchID.HasValue ?
            new ObjectParameter("branchID", branchID) :
            new ObjectParameter("branchID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUnMappedEmployeeList_Result>("GetUnMappedEmployeeList", branchIDParameter);
    }


    public virtual int UpdateEmployeeDeputation(Nullable<int> empDeputationID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string organizationName, Nullable<int> updatedBy)
    {

        var empDeputationIDParameter = empDeputationID.HasValue ?
            new ObjectParameter("EmpDeputationID", empDeputationID) :
            new ObjectParameter("EmpDeputationID", typeof(int));


        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("FromDate", fromDate) :
            new ObjectParameter("FromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("ToDate", toDate) :
            new ObjectParameter("ToDate", typeof(System.DateTime));


        var organizationNameParameter = organizationName != null ?
            new ObjectParameter("OrganizationName", organizationName) :
            new ObjectParameter("OrganizationName", typeof(string));


        var updatedByParameter = updatedBy.HasValue ?
            new ObjectParameter("UpdatedBy", updatedBy) :
            new ObjectParameter("UpdatedBy", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEmployeeDeputation", empDeputationIDParameter, fromDateParameter, toDateParameter, organizationNameParameter, updatedByParameter);
    }


    public virtual ObjectResult<GetSubOrdinatesDetails_Result> GetSubOrdinatesDetails(Nullable<int> employeeID)
    {

        var employeeIDParameter = employeeID.HasValue ?
            new ObjectParameter("EmployeeID", employeeID) :
            new ObjectParameter("EmployeeID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSubOrdinatesDetails_Result>("GetSubOrdinatesDetails", employeeIDParameter);
    }


    public virtual ObjectResult<GetStaffBudgetDetailsList_Result> GetStaffBudgetDetailsList(string year, Nullable<int> designationID)
    {

        var yearParameter = year != null ?
            new ObjectParameter("year", year) :
            new ObjectParameter("year", typeof(string));


        var designationIDParameter = designationID.HasValue ?
            new ObjectParameter("designationID", designationID) :
            new ObjectParameter("designationID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStaffBudgetDetailsList_Result>("GetStaffBudgetDetailsList", yearParameter, designationIDParameter);
    }


    public virtual int GenerateStaffBudget(string forYear, string fromYear)
    {

        var forYearParameter = forYear != null ?
            new ObjectParameter("forYear", forYear) :
            new ObjectParameter("forYear", typeof(string));


        var fromYearParameter = fromYear != null ?
            new ObjectParameter("fromYear", fromYear) :
            new ObjectParameter("fromYear", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GenerateStaffBudget", forYearParameter, fromYearParameter);
    }


    public virtual ObjectResult<APARSkillSetList_Result> APARSkillSetList(Nullable<int> departmentID, Nullable<int> designationID)
    {

        var departmentIDParameter = departmentID.HasValue ?
            new ObjectParameter("DepartmentID", departmentID) :
            new ObjectParameter("DepartmentID", typeof(int));


        var designationIDParameter = designationID.HasValue ?
            new ObjectParameter("DesignationID", designationID) :
            new ObjectParameter("DesignationID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<APARSkillSetList_Result>("APARSkillSetList", departmentIDParameter, designationIDParameter);
    }


    public virtual ObjectResult<GetAPARSkillDetail_Result> GetAPARSkillDetail(Nullable<int> skillSetID, Nullable<int> skillTypeID)
    {

        var skillSetIDParameter = skillSetID.HasValue ?
            new ObjectParameter("skillSetID", skillSetID) :
            new ObjectParameter("skillSetID", typeof(int));


        var skillTypeIDParameter = skillTypeID.HasValue ?
            new ObjectParameter("skillTypeID", skillTypeID) :
            new ObjectParameter("skillTypeID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAPARSkillDetail_Result>("GetAPARSkillDetail", skillSetIDParameter, skillTypeIDParameter);
    }


    public virtual ObjectResult<GetAPARHdrDetail_Result> GetAPARHdrDetail(Nullable<int> branchID, Nullable<int> employeeID, string reportingYr)
    {

        var branchIDParameter = branchID.HasValue ?
            new ObjectParameter("branchID", branchID) :
            new ObjectParameter("branchID", typeof(int));


        var employeeIDParameter = employeeID.HasValue ?
            new ObjectParameter("employeeID", employeeID) :
            new ObjectParameter("employeeID", typeof(int));


        var reportingYrParameter = reportingYr != null ?
            new ObjectParameter("reportingYr", reportingYr) :
            new ObjectParameter("reportingYr", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAPARHdrDetail_Result>("GetAPARHdrDetail", branchIDParameter, employeeIDParameter, reportingYrParameter);
    }


    public virtual ObjectResult<GetAPARFormDetail_Result> GetAPARFormDetail(Nullable<int> employeeID, Nullable<int> departmentID, Nullable<int> designationID, string reportingYr)
    {

        var employeeIDParameter = employeeID.HasValue ?
            new ObjectParameter("employeeID", employeeID) :
            new ObjectParameter("employeeID", typeof(int));


        var departmentIDParameter = departmentID.HasValue ?
            new ObjectParameter("departmentID", departmentID) :
            new ObjectParameter("departmentID", typeof(int));


        var designationIDParameter = designationID.HasValue ?
            new ObjectParameter("designationID", designationID) :
            new ObjectParameter("designationID", typeof(int));


        var reportingYrParameter = reportingYr != null ?
            new ObjectParameter("reportingYr", reportingYr) :
            new ObjectParameter("reportingYr", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAPARFormDetail_Result>("GetAPARFormDetail", employeeIDParameter, departmentIDParameter, designationIDParameter, reportingYrParameter);
    }


    public virtual ObjectResult<GetTrainingFromDetail_Result> GetTrainingFromDetail(Nullable<int> feedBackFormHdrID, Nullable<int> trainingID, Nullable<int> employeeID)
    {

        var feedBackFormHdrIDParameter = feedBackFormHdrID.HasValue ?
            new ObjectParameter("FeedBackFormHdrID", feedBackFormHdrID) :
            new ObjectParameter("FeedBackFormHdrID", typeof(int));


        var trainingIDParameter = trainingID.HasValue ?
            new ObjectParameter("TrainingID", trainingID) :
            new ObjectParameter("TrainingID", typeof(int));


        var employeeIDParameter = employeeID.HasValue ?
            new ObjectParameter("EmployeeID", employeeID) :
            new ObjectParameter("EmployeeID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTrainingFromDetail_Result>("GetTrainingFromDetail", feedBackFormHdrIDParameter, trainingIDParameter, employeeIDParameter);
    }


    public virtual ObjectResult<GetSanctionLoanList_Result> GetSanctionLoanList()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSanctionLoanList_Result>("GetSanctionLoanList");
    }


    public virtual ObjectResult<GetSkillSetDetails_Result> GetSkillSetDetails(Nullable<int> departmentID, Nullable<int> designationID, Nullable<int> skilltypeID, Nullable<int> skillID)
    {

        var departmentIDParameter = departmentID.HasValue ?
            new ObjectParameter("departmentID", departmentID) :
            new ObjectParameter("departmentID", typeof(int));


        var designationIDParameter = designationID.HasValue ?
            new ObjectParameter("designationID", designationID) :
            new ObjectParameter("designationID", typeof(int));


        var skilltypeIDParameter = skilltypeID.HasValue ?
            new ObjectParameter("skilltypeID", skilltypeID) :
            new ObjectParameter("skilltypeID", typeof(int));


        var skillIDParameter = skillID.HasValue ?
            new ObjectParameter("skillID", skillID) :
            new ObjectParameter("skillID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSkillSetDetails_Result>("GetSkillSetDetails", departmentIDParameter, designationIDParameter, skilltypeIDParameter, skillIDParameter);
    }


    public virtual int SP_DummyMonthlyInput(Nullable<short> salMonth, Nullable<short> salYear, Nullable<short> previousMonth, Nullable<short> previousYear)
    {

        var salMonthParameter = salMonth.HasValue ?
            new ObjectParameter("SalMonth", salMonth) :
            new ObjectParameter("SalMonth", typeof(short));


        var salYearParameter = salYear.HasValue ?
            new ObjectParameter("SalYear", salYear) :
            new ObjectParameter("SalYear", typeof(short));


        var previousMonthParameter = previousMonth.HasValue ?
            new ObjectParameter("PreviousMonth", previousMonth) :
            new ObjectParameter("PreviousMonth", typeof(short));


        var previousYearParameter = previousYear.HasValue ?
            new ObjectParameter("PreviousYear", previousYear) :
            new ObjectParameter("PreviousYear", typeof(short));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DummyMonthlyInput", salMonthParameter, salYearParameter, previousMonthParameter, previousYearParameter);
    }


    public virtual ObjectResult<Nullable<decimal>> SP_GetMedicalReimbursement(Nullable<int> employeeId, string fromYear, string toYear)
    {

        var employeeIdParameter = employeeId.HasValue ?
            new ObjectParameter("EmployeeId", employeeId) :
            new ObjectParameter("EmployeeId", typeof(int));


        var fromYearParameter = fromYear != null ?
            new ObjectParameter("fromYear", fromYear) :
            new ObjectParameter("fromYear", typeof(string));


        var toYearParameter = toYear != null ?
            new ObjectParameter("toYear", toYear) :
            new ObjectParameter("toYear", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("SP_GetMedicalReimbursement", employeeIdParameter, fromYearParameter, toYearParameter);
    }


    public virtual int SP_UpdateSalaryHeadsInMonthlyInput(string head, Nullable<short> currentMonth, Nullable<short> currentYear, string flag)
    {

        var headParameter = head != null ?
            new ObjectParameter("Head", head) :
            new ObjectParameter("Head", typeof(string));


        var currentMonthParameter = currentMonth.HasValue ?
            new ObjectParameter("CurrentMonth", currentMonth) :
            new ObjectParameter("CurrentMonth", typeof(short));


        var currentYearParameter = currentYear.HasValue ?
            new ObjectParameter("CurrentYear", currentYear) :
            new ObjectParameter("CurrentYear", typeof(short));


        var flagParameter = flag != null ?
            new ObjectParameter("flag", flag) :
            new ObjectParameter("flag", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateSalaryHeadsInMonthlyInput", headParameter, currentMonthParameter, currentYearParameter, flagParameter);
    }


    public virtual int PR_ManageSeniority(Nullable<int> empID, Nullable<int> oldDesID, Nullable<int> desID)
    {

        var empIDParameter = empID.HasValue ?
            new ObjectParameter("EmpID", empID) :
            new ObjectParameter("EmpID", typeof(int));


        var oldDesIDParameter = oldDesID.HasValue ?
            new ObjectParameter("OldDesID", oldDesID) :
            new ObjectParameter("OldDesID", typeof(int));


        var desIDParameter = desID.HasValue ?
            new ObjectParameter("DesID", desID) :
            new ObjectParameter("DesID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PR_ManageSeniority", empIDParameter, oldDesIDParameter, desIDParameter);
    }


    public virtual ObjectResult<GetCandidateAppliedCount_Result> GetCandidateAppliedCount(Nullable<int> desinationID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
    {

        var desinationIDParameter = desinationID.HasValue ?
            new ObjectParameter("desinationID", desinationID) :
            new ObjectParameter("desinationID", typeof(int));


        var startDateParameter = startDate.HasValue ?
            new ObjectParameter("startDate", startDate) :
            new ObjectParameter("startDate", typeof(System.DateTime));


        var endDateParameter = endDate.HasValue ?
            new ObjectParameter("endDate", endDate) :
            new ObjectParameter("endDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCandidateAppliedCount_Result>("GetCandidateAppliedCount", desinationIDParameter, startDateParameter, endDateParameter);
    }


    public virtual ObjectResult<GetInboxFiles_Result> GetInboxFiles(Nullable<int> receiverID)
    {

        var receiverIDParameter = receiverID.HasValue ?
            new ObjectParameter("receiverID", receiverID) :
            new ObjectParameter("receiverID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInboxFiles_Result>("GetInboxFiles", receiverIDParameter);
    }


    public virtual ObjectResult<GetOutboxFiles_Result> GetOutboxFiles(Nullable<int> senderID)
    {

        var senderIDParameter = senderID.HasValue ?
            new ObjectParameter("senderID", senderID) :
            new ObjectParameter("senderID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOutboxFiles_Result>("GetOutboxFiles", senderIDParameter);
    }


    public virtual ObjectResult<GetFileForwardDetails_Result> GetFileForwardDetails(Nullable<int> referenceID)
    {

        var referenceIDParameter = referenceID.HasValue ?
            new ObjectParameter("referenceID", referenceID) :
            new ObjectParameter("referenceID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFileForwardDetails_Result>("GetFileForwardDetails", referenceIDParameter);
    }


    public virtual ObjectResult<GetFileTrackingListForSearch_Result> GetFileTrackingListForSearch(string fileNo, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
    {

        var fileNoParameter = fileNo != null ?
            new ObjectParameter("fileNo", fileNo) :
            new ObjectParameter("fileNo", typeof(string));


        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFileTrackingListForSearch_Result>("GetFileTrackingListForSearch", fileNoParameter, fromDateParameter, toDateParameter);
    }


    public virtual int UpdateLoanTransData(string periodOfPayment, Nullable<byte> salMonth, Nullable<short> salYear, Nullable<bool> allBranchesExceptHO, Nullable<int> branchID, Nullable<int> employeeID, Nullable<int> empType)
    {

        var periodOfPaymentParameter = periodOfPayment != null ?
            new ObjectParameter("periodOfPayment", periodOfPayment) :
            new ObjectParameter("periodOfPayment", typeof(string));


        var salMonthParameter = salMonth.HasValue ?
            new ObjectParameter("salMonth", salMonth) :
            new ObjectParameter("salMonth", typeof(byte));


        var salYearParameter = salYear.HasValue ?
            new ObjectParameter("salYear", salYear) :
            new ObjectParameter("salYear", typeof(short));


        var allBranchesExceptHOParameter = allBranchesExceptHO.HasValue ?
            new ObjectParameter("allBranchesExceptHO", allBranchesExceptHO) :
            new ObjectParameter("allBranchesExceptHO", typeof(bool));


        var branchIDParameter = branchID.HasValue ?
            new ObjectParameter("branchID", branchID) :
            new ObjectParameter("branchID", typeof(int));


        var employeeIDParameter = employeeID.HasValue ?
            new ObjectParameter("employeeID", employeeID) :
            new ObjectParameter("employeeID", typeof(int));


        var empTypeParameter = empType.HasValue ?
            new ObjectParameter("empType", empType) :
            new ObjectParameter("empType", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateLoanTransData", periodOfPaymentParameter, salMonthParameter, salYearParameter, allBranchesExceptHOParameter, branchIDParameter, employeeIDParameter, empTypeParameter);
    }


    public virtual ObjectResult<getArrearperiodsdetailsforPay_Result> getArrearperiodsdetailsforPay(string arrearType)
    {

        var arrearTypeParameter = arrearType != null ?
            new ObjectParameter("arrearType", arrearType) :
            new ObjectParameter("arrearType", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getArrearperiodsdetailsforPay_Result>("getArrearperiodsdetailsforPay", arrearTypeParameter);
    }


    public virtual int CreatePayArrearDetail(string fROMPERIOD, string tOPERIOD, string arrearType, string eMP, string brcode, string generateDate)
    {

        var fROMPERIODParameter = fROMPERIOD != null ?
            new ObjectParameter("FROMPERIOD", fROMPERIOD) :
            new ObjectParameter("FROMPERIOD", typeof(string));


        var tOPERIODParameter = tOPERIOD != null ?
            new ObjectParameter("TOPERIOD", tOPERIOD) :
            new ObjectParameter("TOPERIOD", typeof(string));


        var arrearTypeParameter = arrearType != null ?
            new ObjectParameter("ArrearType", arrearType) :
            new ObjectParameter("ArrearType", typeof(string));


        var eMPParameter = eMP != null ?
            new ObjectParameter("EMP", eMP) :
            new ObjectParameter("EMP", typeof(string));


        var brcodeParameter = brcode != null ?
            new ObjectParameter("brcode", brcode) :
            new ObjectParameter("brcode", typeof(string));


        var generateDateParameter = generateDate != null ?
            new ObjectParameter("GenerateDate", generateDate) :
            new ObjectParameter("GenerateDate", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreatePayArrearDetail", fROMPERIODParameter, tOPERIODParameter, arrearTypeParameter, eMPParameter, brcodeParameter, generateDateParameter);
    }


    public virtual ObjectResult<GetUpdateIncrementDetails_Result> GetUpdateIncrementDetails(Nullable<int> branchID, string employeeCode, string employeeName, Nullable<int> incrementMonth)
    {

        var branchIDParameter = branchID.HasValue ?
            new ObjectParameter("BranchID", branchID) :
            new ObjectParameter("BranchID", typeof(int));


        var employeeCodeParameter = employeeCode != null ?
            new ObjectParameter("EmployeeCode", employeeCode) :
            new ObjectParameter("EmployeeCode", typeof(string));


        var employeeNameParameter = employeeName != null ?
            new ObjectParameter("EmployeeName", employeeName) :
            new ObjectParameter("EmployeeName", typeof(string));


        var incrementMonthParameter = incrementMonth.HasValue ?
            new ObjectParameter("IncrementMonth", incrementMonth) :
            new ObjectParameter("IncrementMonth", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUpdateIncrementDetails_Result>("GetUpdateIncrementDetails", branchIDParameter, employeeCodeParameter, employeeNameParameter, incrementMonthParameter);
    }


    public virtual ObjectResult<GetUpdateValidateNewBasicAmountDetails_Result> GetUpdateValidateNewBasicAmountDetails(Nullable<int> employeeId, Nullable<int> incrementMonth)
    {

        var employeeIdParameter = employeeId.HasValue ?
            new ObjectParameter("EmployeeId", employeeId) :
            new ObjectParameter("EmployeeId", typeof(int));


        var incrementMonthParameter = incrementMonth.HasValue ?
            new ObjectParameter("IncrementMonth", incrementMonth) :
            new ObjectParameter("IncrementMonth", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUpdateValidateNewBasicAmountDetails_Result>("GetUpdateValidateNewBasicAmountDetails", employeeIdParameter, incrementMonthParameter);
    }


    public virtual int GetManualDataImportFieldDtls()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetManualDataImportFieldDtls");
    }


    public virtual ObjectResult<GetMultipleTableDataResult_Result> GetMultipleTableDataResult(string fromYear, string toYear, string flag)
    {

        var fromYearParameter = fromYear != null ?
            new ObjectParameter("fromYear", fromYear) :
            new ObjectParameter("fromYear", typeof(string));


        var toYearParameter = toYear != null ?
            new ObjectParameter("toYear", toYear) :
            new ObjectParameter("toYear", typeof(string));


        var flagParameter = flag != null ?
            new ObjectParameter("Flag", flag) :
            new ObjectParameter("Flag", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMultipleTableDataResult_Result>("GetMultipleTableDataResult", fromYearParameter, toYearParameter, flagParameter);
    }


    public virtual int InsertIntoLoanPriorityHistory(string period)
    {

        var periodParameter = period != null ?
            new ObjectParameter("period", period) :
            new ObjectParameter("period", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertIntoLoanPriorityHistory", periodParameter);
    }


    public virtual ObjectResult<GetLTCDetail_Result> GetLTCDetail(Nullable<int> ltcID, Nullable<int> employeeID)
    {

        var ltcIDParameter = ltcID.HasValue ?
            new ObjectParameter("ltcID", ltcID) :
            new ObjectParameter("ltcID", typeof(int));


        var employeeIDParameter = employeeID.HasValue ?
            new ObjectParameter("employeeID", employeeID) :
            new ObjectParameter("employeeID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLTCDetail_Result>("GetLTCDetail", ltcIDParameter, employeeIDParameter);
    }


    public virtual ObjectResult<GetLoanApplicationList_Result> GetLoanApplicationList(Nullable<int> empID, Nullable<int> applicationID)
    {

        var empIDParameter = empID.HasValue ?
            new ObjectParameter("EmpID", empID) :
            new ObjectParameter("EmpID", typeof(int));


        var applicationIDParameter = applicationID.HasValue ?
            new ObjectParameter("ApplicationID", applicationID) :
            new ObjectParameter("ApplicationID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLoanApplicationList_Result>("GetLoanApplicationList", empIDParameter, applicationIDParameter);
    }


    public virtual ObjectResult<GetEmployeeDetailForLoan_Result> GetEmployeeDetailForLoan(Nullable<int> empID)
    {

        var empIDParameter = empID.HasValue ?
            new ObjectParameter("EmpID", empID) :
            new ObjectParameter("EmpID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeDetailForLoan_Result>("GetEmployeeDetailForLoan", empIDParameter);
    }


    public virtual ObjectResult<GetEmpCountBasedOnDepartment_Result> GetEmpCountBasedOnDepartment()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmpCountBasedOnDepartment_Result>("GetEmpCountBasedOnDepartment");
    }


    public virtual ObjectResult<GetLoanApplicationDetails_Result> GetLoanApplicationDetails(Nullable<int> empID, Nullable<int> statusID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
    {

        var empIDParameter = empID.HasValue ?
            new ObjectParameter("EmpID", empID) :
            new ObjectParameter("EmpID", typeof(int));


        var statusIDParameter = statusID.HasValue ?
            new ObjectParameter("StatusID", statusID) :
            new ObjectParameter("StatusID", typeof(int));


        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLoanApplicationDetails_Result>("GetLoanApplicationDetails", empIDParameter, statusIDParameter, fromDateParameter, toDateParameter);
    }


    public virtual ObjectResult<GetOTAslipDetail_Result> GetOTAslipDetail(Nullable<int> employeeID, Nullable<int> applicationID)
    {

        var employeeIDParameter = employeeID.HasValue ?
            new ObjectParameter("employeeID", employeeID) :
            new ObjectParameter("employeeID", typeof(int));


        var applicationIDParameter = applicationID.HasValue ?
            new ObjectParameter("applicationID", applicationID) :
            new ObjectParameter("applicationID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOTAslipDetail_Result>("GetOTAslipDetail", employeeIDParameter, applicationIDParameter);
    }


    public virtual ObjectResult<GetEPFNominationDetail_Result> GetEPFNominationDetail(Nullable<int> ePFNoID, Nullable<int> employeeID)
    {

        var ePFNoIDParameter = ePFNoID.HasValue ?
            new ObjectParameter("EPFNoID", ePFNoID) :
            new ObjectParameter("EPFNoID", typeof(int));


        var employeeIDParameter = employeeID.HasValue ?
            new ObjectParameter("employeeID", employeeID) :
            new ObjectParameter("employeeID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEPFNominationDetail_Result>("GetEPFNominationDetail", ePFNoIDParameter, employeeIDParameter);
    }


    public virtual ObjectResult<GetEPFEPSNominee_Result> GetEPFEPSNominee(Nullable<int> employeeID, Nullable<int> filterBy, Nullable<int> epfNo)
    {

        var employeeIDParameter = employeeID.HasValue ?
            new ObjectParameter("employeeID", employeeID) :
            new ObjectParameter("employeeID", typeof(int));


        var filterByParameter = filterBy.HasValue ?
            new ObjectParameter("filterBy", filterBy) :
            new ObjectParameter("filterBy", typeof(int));


        var epfNoParameter = epfNo.HasValue ?
            new ObjectParameter("epfNo", epfNo) :
            new ObjectParameter("epfNo", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEPFEPSNominee_Result>("GetEPFEPSNominee", employeeIDParameter, filterByParameter, epfNoParameter);
    }


    public virtual int SP_UpdateSalaryMonthlyInput(Nullable<int> employeeId, string monthlyInputHeadId, Nullable<decimal> amount, Nullable<int> currentMonth, Nullable<int> currentYear)
    {

        var employeeIdParameter = employeeId.HasValue ?
            new ObjectParameter("EmployeeId", employeeId) :
            new ObjectParameter("EmployeeId", typeof(int));


        var monthlyInputHeadIdParameter = monthlyInputHeadId != null ?
            new ObjectParameter("MonthlyInputHeadId", monthlyInputHeadId) :
            new ObjectParameter("MonthlyInputHeadId", typeof(string));


        var amountParameter = amount.HasValue ?
            new ObjectParameter("Amount", amount) :
            new ObjectParameter("Amount", typeof(decimal));


        var currentMonthParameter = currentMonth.HasValue ?
            new ObjectParameter("currentMonth", currentMonth) :
            new ObjectParameter("currentMonth", typeof(int));


        var currentYearParameter = currentYear.HasValue ?
            new ObjectParameter("currentYear", currentYear) :
            new ObjectParameter("currentYear", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateSalaryMonthlyInput", employeeIdParameter, monthlyInputHeadIdParameter, amountParameter, currentMonthParameter, currentYearParameter);
    }


    public virtual ObjectResult<GetChildrenEducationDetails_Result> GetChildrenEducationDetails(Nullable<int> empID, Nullable<int> childrenEduHdrId)
    {

        var empIDParameter = empID.HasValue ?
            new ObjectParameter("empID", empID) :
            new ObjectParameter("empID", typeof(int));


        var childrenEduHdrIdParameter = childrenEduHdrId.HasValue ?
            new ObjectParameter("childrenEduHdrId", childrenEduHdrId) :
            new ObjectParameter("childrenEduHdrId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetChildrenEducationDetails_Result>("GetChildrenEducationDetails", empIDParameter, childrenEduHdrIdParameter);
    }


    public virtual ObjectResult<GetConveyanceBillDescription_Result> GetConveyanceBillDescription(Nullable<int> employeeID, Nullable<int> conveyanceBillDetailID)
    {

        var employeeIDParameter = employeeID.HasValue ?
            new ObjectParameter("employeeID", employeeID) :
            new ObjectParameter("employeeID", typeof(int));


        var conveyanceBillDetailIDParameter = conveyanceBillDetailID.HasValue ?
            new ObjectParameter("conveyanceBillDetailID", conveyanceBillDetailID) :
            new ObjectParameter("conveyanceBillDetailID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetConveyanceBillDescription_Result>("GetConveyanceBillDescription", employeeIDParameter, conveyanceBillDetailIDParameter);
    }


    public virtual ObjectResult<GetConveyanceFormDetails_Result> GetConveyanceFormDetails(Nullable<int> employeeID, Nullable<int> conveyanceDetailID)
    {

        var employeeIDParameter = employeeID.HasValue ?
            new ObjectParameter("employeeID", employeeID) :
            new ObjectParameter("employeeID", typeof(int));


        var conveyanceDetailIDParameter = conveyanceDetailID.HasValue ?
            new ObjectParameter("conveyanceDetailID", conveyanceDetailID) :
            new ObjectParameter("conveyanceDetailID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetConveyanceFormDetails_Result>("GetConveyanceFormDetails", employeeIDParameter, conveyanceDetailIDParameter);
    }


    public virtual ObjectResult<GetMaleEmployeeNominee_Result> GetMaleEmployeeNominee(Nullable<int> employeeID)
    {

        var employeeIDParameter = employeeID.HasValue ?
            new ObjectParameter("employeeID", employeeID) :
            new ObjectParameter("employeeID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMaleEmployeeNominee_Result>("GetMaleEmployeeNominee", employeeIDParameter);
    }


    public virtual int getAttendancemanually(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, ObjectParameter output)
    {

        var fromdateParameter = fromdate.HasValue ?
            new ObjectParameter("fromdate", fromdate) :
            new ObjectParameter("fromdate", typeof(System.DateTime));


        var todateParameter = todate.HasValue ?
            new ObjectParameter("todate", todate) :
            new ObjectParameter("todate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("getAttendancemanually", fromdateParameter, todateParameter, output);
    }


    public virtual ObjectResult<GetAssetHistory_Result> GetAssetHistory(Nullable<int> assetID)
    {

        var assetIDParameter = assetID.HasValue ?
            new ObjectParameter("assetID", assetID) :
            new ObjectParameter("assetID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAssetHistory_Result>("GetAssetHistory", assetIDParameter);
    }


    public virtual ObjectResult<GetAppraisalHistory_Result> GetAppraisalHistory(Nullable<int> empID, Nullable<int> processID, Nullable<int> referenceID)
    {

        var empIDParameter = empID.HasValue ?
            new ObjectParameter("empID", empID) :
            new ObjectParameter("empID", typeof(int));


        var processIDParameter = processID.HasValue ?
            new ObjectParameter("ProcessID", processID) :
            new ObjectParameter("ProcessID", typeof(int));


        var referenceIDParameter = referenceID.HasValue ?
            new ObjectParameter("ReferenceID", referenceID) :
            new ObjectParameter("ReferenceID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAppraisalHistory_Result>("GetAppraisalHistory", empIDParameter, processIDParameter, referenceIDParameter);
    }


    public virtual ObjectResult<GetAppliedCandidateDetail_Result> GetAppliedCandidateDetail(Nullable<int> requirementID)
    {

        var requirementIDParameter = requirementID.HasValue ?
            new ObjectParameter("requirementID", requirementID) :
            new ObjectParameter("requirementID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAppliedCandidateDetail_Result>("GetAppliedCandidateDetail", requirementIDParameter);
    }


    public virtual int CopyFeedbackQuesfromTraining(Nullable<int> prevTrainingID, Nullable<int> trainingID, Nullable<int> userID)
    {

        var prevTrainingIDParameter = prevTrainingID.HasValue ?
            new ObjectParameter("prevTrainingID", prevTrainingID) :
            new ObjectParameter("prevTrainingID", typeof(int));


        var trainingIDParameter = trainingID.HasValue ?
            new ObjectParameter("trainingID", trainingID) :
            new ObjectParameter("trainingID", typeof(int));


        var userIDParameter = userID.HasValue ?
            new ObjectParameter("userID", userID) :
            new ObjectParameter("userID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CopyFeedbackQuesfromTraining", prevTrainingIDParameter, trainingIDParameter, userIDParameter);
    }


    public virtual ObjectResult<GetTrainingReportEmpWise_Result> GetTrainingReportEmpWise(Nullable<int> empID, Nullable<int> statusID)
    {

        var empIDParameter = empID.HasValue ?
            new ObjectParameter("EmpID", empID) :
            new ObjectParameter("EmpID", typeof(int));


        var statusIDParameter = statusID.HasValue ?
            new ObjectParameter("StatusID", statusID) :
            new ObjectParameter("StatusID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTrainingReportEmpWise_Result>("GetTrainingReportEmpWise", empIDParameter, statusIDParameter);
    }


    public virtual ObjectResult<GetAnsweredTickets_Result> GetAnsweredTickets(Nullable<int> senderID)
    {

        var senderIDParameter = senderID.HasValue ?
            new ObjectParameter("senderID", senderID) :
            new ObjectParameter("senderID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAnsweredTickets_Result>("GetAnsweredTickets", senderIDParameter);
    }


    public virtual ObjectResult<GetPendingTickets_Result> GetPendingTickets(Nullable<int> receiverID)
    {

        var receiverIDParameter = receiverID.HasValue ?
            new ObjectParameter("receiverID", receiverID) :
            new ObjectParameter("receiverID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPendingTickets_Result>("GetPendingTickets", receiverIDParameter);
    }


    public virtual ObjectResult<SP_GetProcessApprovalDetail_Result> SP_GetProcessApprovalDetail(Nullable<int> processID, Nullable<int> branchID)
    {

        var processIDParameter = processID.HasValue ?
            new ObjectParameter("processID", processID) :
            new ObjectParameter("processID", typeof(int));


        var branchIDParameter = branchID.HasValue ?
            new ObjectParameter("branchID", branchID) :
            new ObjectParameter("branchID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetProcessApprovalDetail_Result>("SP_GetProcessApprovalDetail", processIDParameter, branchIDParameter);
    }


    public virtual ObjectResult<SP_GetTicketAnswerDetail_Result> SP_GetTicketAnswerDetail(Nullable<int> ticketID)
    {

        var ticketIDParameter = ticketID.HasValue ?
            new ObjectParameter("ticketID", ticketID) :
            new ObjectParameter("ticketID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetTicketAnswerDetail_Result>("SP_GetTicketAnswerDetail", ticketIDParameter);
    }


    public virtual ObjectResult<GetTicketForwardDetails_Result> GetTicketForwardDetails(Nullable<int> ticketID)
    {

        var ticketIDParameter = ticketID.HasValue ?
            new ObjectParameter("ticketID", ticketID) :
            new ObjectParameter("ticketID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTicketForwardDetails_Result>("GetTicketForwardDetails", ticketIDParameter);
    }


    public virtual ObjectResult<Nullable<int>> Conf_StatusHaveToUpdateorNot(Nullable<int> empID, Nullable<int> processID, Nullable<int> formHdrID)
    {

        var empIDParameter = empID.HasValue ?
            new ObjectParameter("empID", empID) :
            new ObjectParameter("empID", typeof(int));


        var processIDParameter = processID.HasValue ?
            new ObjectParameter("processID", processID) :
            new ObjectParameter("processID", typeof(int));


        var formHdrIDParameter = formHdrID.HasValue ?
            new ObjectParameter("formHdrID", formHdrID) :
            new ObjectParameter("formHdrID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Conf_StatusHaveToUpdateorNot", empIDParameter, processIDParameter, formHdrIDParameter);
    }


    public virtual ObjectResult<GetTrainingReport_Result> GetTrainingReport(Nullable<int> statusID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
    {

        var statusIDParameter = statusID.HasValue ?
            new ObjectParameter("StatusID", statusID) :
            new ObjectParameter("StatusID", typeof(int));


        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("FromDate", fromDate) :
            new ObjectParameter("FromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("ToDate", toDate) :
            new ObjectParameter("ToDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTrainingReport_Result>("GetTrainingReport", statusIDParameter, fromDateParameter, toDateParameter);
    }


    public virtual ObjectResult<GetGreetingNotification_Result> GetGreetingNotification(Nullable<System.DateTime> date)
    {

        var dateParameter = date.HasValue ?
            new ObjectParameter("date", date) :
            new ObjectParameter("date", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetGreetingNotification_Result>("GetGreetingNotification", dateParameter);
    }


    public virtual ObjectResult<GetTrainingRptInternalExternal_Result> GetTrainingRptInternalExternal(Nullable<int> trainertypeID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
    {

        var trainertypeIDParameter = trainertypeID.HasValue ?
            new ObjectParameter("trainertypeID", trainertypeID) :
            new ObjectParameter("trainertypeID", typeof(int));


        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("FromDate", fromDate) :
            new ObjectParameter("FromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("ToDate", toDate) :
            new ObjectParameter("ToDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTrainingRptInternalExternal_Result>("GetTrainingRptInternalExternal", trainertypeIDParameter, fromDateParameter, toDateParameter);
    }


    public virtual ObjectResult<GetTrainingRrtDesignationWise_Result> GetTrainingRrtDesignationWise(Nullable<int> designationID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
    {

        var designationIDParameter = designationID.HasValue ?
            new ObjectParameter("DesignationID", designationID) :
            new ObjectParameter("DesignationID", typeof(int));


        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("FromDate", fromDate) :
            new ObjectParameter("FromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("ToDate", toDate) :
            new ObjectParameter("ToDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTrainingRrtDesignationWise_Result>("GetTrainingRrtDesignationWise", designationIDParameter, fromDateParameter, toDateParameter);
    }


    public virtual ObjectResult<GetTrainingRptTypeWise_Result> GetTrainingRptTypeWise(Nullable<int> ttypeID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
    {

        var ttypeIDParameter = ttypeID.HasValue ?
            new ObjectParameter("ttypeID", ttypeID) :
            new ObjectParameter("ttypeID", typeof(int));


        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("FromDate", fromDate) :
            new ObjectParameter("FromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("ToDate", toDate) :
            new ObjectParameter("ToDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTrainingRptTypeWise_Result>("GetTrainingRptTypeWise", ttypeIDParameter, fromDateParameter, toDateParameter);
    }


    public virtual int CheckArchiveForGivenYr(Nullable<int> year, ObjectParameter exist)
    {

        var yearParameter = year.HasValue ?
            new ObjectParameter("year", year) :
            new ObjectParameter("year", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CheckArchiveForGivenYr", yearParameter, exist);
    }


    public virtual ObjectResult<SP_EmpWiseSalaryReport_Result> SP_EmpWiseSalaryReport(Nullable<byte> salMonth, Nullable<short> salYear, Nullable<int> eMPID)
    {

        var salMonthParameter = salMonth.HasValue ?
            new ObjectParameter("SalMonth", salMonth) :
            new ObjectParameter("SalMonth", typeof(byte));


        var salYearParameter = salYear.HasValue ?
            new ObjectParameter("SalYear", salYear) :
            new ObjectParameter("SalYear", typeof(short));


        var eMPIDParameter = eMPID.HasValue ?
            new ObjectParameter("EMPID", eMPID) :
            new ObjectParameter("EMPID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_EmpWiseSalaryReport_Result>("SP_EmpWiseSalaryReport", salMonthParameter, salYearParameter, eMPIDParameter);
    }


    public virtual ObjectResult<GetFormTrainingDtls_Result> GetFormTrainingDtls(string hdrtableName, string childtableName, Nullable<int> employeeID, Nullable<int> formGroupID, Nullable<int> formID, string reportingYr)
    {

        var hdrtableNameParameter = hdrtableName != null ?
            new ObjectParameter("HdrtableName", hdrtableName) :
            new ObjectParameter("HdrtableName", typeof(string));


        var childtableNameParameter = childtableName != null ?
            new ObjectParameter("childtableName", childtableName) :
            new ObjectParameter("childtableName", typeof(string));


        var employeeIDParameter = employeeID.HasValue ?
            new ObjectParameter("employeeID", employeeID) :
            new ObjectParameter("employeeID", typeof(int));


        var formGroupIDParameter = formGroupID.HasValue ?
            new ObjectParameter("formGroupID", formGroupID) :
            new ObjectParameter("formGroupID", typeof(int));


        var formIDParameter = formID.HasValue ?
            new ObjectParameter("formID", formID) :
            new ObjectParameter("formID", typeof(int));


        var reportingYrParameter = reportingYr != null ?
            new ObjectParameter("ReportingYr", reportingYr) :
            new ObjectParameter("ReportingYr", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFormTrainingDtls_Result>("GetFormTrainingDtls", hdrtableNameParameter, childtableNameParameter, employeeIDParameter, formGroupIDParameter, formIDParameter, reportingYrParameter);
    }


    public virtual ObjectResult<GetEmployeeLeaveForPDF_Result> GetEmployeeLeaveForPDF(Nullable<int> leaveID, Nullable<int> employeeID)
    {

        var leaveIDParameter = leaveID.HasValue ?
            new ObjectParameter("leaveID", leaveID) :
            new ObjectParameter("leaveID", typeof(int));


        var employeeIDParameter = employeeID.HasValue ?
            new ObjectParameter("employeeID", employeeID) :
            new ObjectParameter("employeeID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeLeaveForPDF_Result>("GetEmployeeLeaveForPDF", leaveIDParameter, employeeIDParameter);
    }


    public virtual ObjectResult<GetAPARTrainingbySubordinate_Result> GetAPARTrainingbySubordinate(string reportingYr, Nullable<int> managerID)
    {

        var reportingYrParameter = reportingYr != null ?
            new ObjectParameter("reportingYr", reportingYr) :
            new ObjectParameter("reportingYr", typeof(string));


        var managerIDParameter = managerID.HasValue ?
            new ObjectParameter("ManagerID", managerID) :
            new ObjectParameter("ManagerID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAPARTrainingbySubordinate_Result>("GetAPARTrainingbySubordinate", reportingYrParameter, managerIDParameter);
    }


    public virtual ObjectResult<GetSeniorityList_Result> GetSeniorityList(Nullable<int> employeeID, Nullable<int> designationID)
    {

        var employeeIDParameter = employeeID.HasValue ?
            new ObjectParameter("employeeID", employeeID) :
            new ObjectParameter("employeeID", typeof(int));


        var designationIDParameter = designationID.HasValue ?
            new ObjectParameter("designationID", designationID) :
            new ObjectParameter("designationID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSeniorityList_Result>("GetSeniorityList", employeeIDParameter, designationIDParameter);
    }


    public virtual ObjectResult<GetSubordinateTraining_Result> GetSubordinateTraining(string reportingYr, Nullable<int> managerID)
    {

        var reportingYrParameter = reportingYr != null ?
            new ObjectParameter("reportingYr", reportingYr) :
            new ObjectParameter("reportingYr", typeof(string));


        var managerIDParameter = managerID.HasValue ?
            new ObjectParameter("ManagerID", managerID) :
            new ObjectParameter("ManagerID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSubordinateTraining_Result>("GetSubordinateTraining", reportingYrParameter, managerIDParameter);
    }


    public virtual ObjectResult<GetLastEmployeeCode_Result> GetLastEmployeeCode(Nullable<int> empTypeID)
    {

        var empTypeIDParameter = empTypeID.HasValue ?
            new ObjectParameter("empTypeID", empTypeID) :
            new ObjectParameter("empTypeID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLastEmployeeCode_Result>("GetLastEmployeeCode", empTypeIDParameter);
    }


    public virtual ObjectResult<getemployeeByBranchID_Result> getemployeeByBranchID(Nullable<int> branchID, string fromDate, string todate, string empCode)
    {

        var branchIDParameter = branchID.HasValue ?
            new ObjectParameter("BranchID", branchID) :
            new ObjectParameter("BranchID", typeof(int));


        var fromDateParameter = fromDate != null ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(string));


        var todateParameter = todate != null ?
            new ObjectParameter("todate", todate) :
            new ObjectParameter("todate", typeof(string));


        var empCodeParameter = empCode != null ?
            new ObjectParameter("empCode", empCode) :
            new ObjectParameter("empCode", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getemployeeByBranchID_Result>("getemployeeByBranchID", branchIDParameter, fromDateParameter, todateParameter, empCodeParameter);
    }


    public virtual ObjectResult<SP_GetEncashmentForF_A_Result> SP_GetEncashmentForF_A(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> todate)
    {

        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var todateParameter = todate.HasValue ?
            new ObjectParameter("todate", todate) :
            new ObjectParameter("todate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetEncashmentForF_A_Result>("SP_GetEncashmentForF_A", fromDateParameter, todateParameter);
    }


    public virtual ObjectResult<GetConfirmationDtlForOrdrRpt_Result> GetConfirmationDtlForOrdrRpt(Nullable<int> employeeID, Nullable<int> hdrID, Nullable<int> formHdrID)
    {

        var employeeIDParameter = employeeID.HasValue ?
            new ObjectParameter("employeeID", employeeID) :
            new ObjectParameter("employeeID", typeof(int));


        var hdrIDParameter = hdrID.HasValue ?
            new ObjectParameter("hdrID", hdrID) :
            new ObjectParameter("hdrID", typeof(int));


        var formHdrIDParameter = formHdrID.HasValue ?
            new ObjectParameter("formHdrID", formHdrID) :
            new ObjectParameter("formHdrID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetConfirmationDtlForOrdrRpt_Result>("GetConfirmationDtlForOrdrRpt", employeeIDParameter, hdrIDParameter, formHdrIDParameter);
    }


    public virtual int UpdateEmpPensionDeduct(Nullable<int> salMonth, Nullable<int> salYear, string filterType, Nullable<int> employeeTypeId, Nullable<int> branchID, Nullable<int> employeeID)
    {

        var salMonthParameter = salMonth.HasValue ?
            new ObjectParameter("salMonth", salMonth) :
            new ObjectParameter("salMonth", typeof(int));


        var salYearParameter = salYear.HasValue ?
            new ObjectParameter("salYear", salYear) :
            new ObjectParameter("salYear", typeof(int));


        var filterTypeParameter = filterType != null ?
            new ObjectParameter("filterType", filterType) :
            new ObjectParameter("filterType", typeof(string));


        var employeeTypeIdParameter = employeeTypeId.HasValue ?
            new ObjectParameter("employeeTypeId", employeeTypeId) :
            new ObjectParameter("employeeTypeId", typeof(int));


        var branchIDParameter = branchID.HasValue ?
            new ObjectParameter("branchID", branchID) :
            new ObjectParameter("branchID", typeof(int));


        var employeeIDParameter = employeeID.HasValue ?
            new ObjectParameter("employeeID", employeeID) :
            new ObjectParameter("employeeID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEmpPensionDeduct", salMonthParameter, salYearParameter, filterTypeParameter, employeeTypeIdParameter, branchIDParameter, employeeIDParameter);
    }


    public virtual ObjectResult<GetTicketList_Result> GetTicketList(Nullable<int> employeeID)
    {

        var employeeIDParameter = employeeID.HasValue ?
            new ObjectParameter("employeeID", employeeID) :
            new ObjectParameter("employeeID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTicketList_Result>("GetTicketList", employeeIDParameter);
    }


    public virtual ObjectResult<GetTicketAttachment_Result> GetTicketAttachment(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> departmentID, Nullable<int> designationID, Nullable<int> statusID)
    {

        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        var departmentIDParameter = departmentID.HasValue ?
            new ObjectParameter("departmentID", departmentID) :
            new ObjectParameter("departmentID", typeof(int));


        var designationIDParameter = designationID.HasValue ?
            new ObjectParameter("designationID", designationID) :
            new ObjectParameter("designationID", typeof(int));


        var statusIDParameter = statusID.HasValue ?
            new ObjectParameter("statusID", statusID) :
            new ObjectParameter("statusID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTicketAttachment_Result>("GetTicketAttachment", fromDateParameter, toDateParameter, departmentIDParameter, designationIDParameter, statusIDParameter);
    }


    public virtual ObjectResult<GetTicketForSectionHead_Result> GetTicketForSectionHead(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> departmentID, Nullable<int> designationID, Nullable<int> statusID)
    {

        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("fromDate", fromDate) :
            new ObjectParameter("fromDate", typeof(System.DateTime));


        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("toDate", toDate) :
            new ObjectParameter("toDate", typeof(System.DateTime));


        var departmentIDParameter = departmentID.HasValue ?
            new ObjectParameter("departmentID", departmentID) :
            new ObjectParameter("departmentID", typeof(int));


        var designationIDParameter = designationID.HasValue ?
            new ObjectParameter("designationID", designationID) :
            new ObjectParameter("designationID", typeof(int));


        var statusIDParameter = statusID.HasValue ?
            new ObjectParameter("statusID", statusID) :
            new ObjectParameter("statusID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTicketForSectionHead_Result>("GetTicketForSectionHead", fromDateParameter, toDateParameter, departmentIDParameter, designationIDParameter, statusIDParameter);
    }


    public virtual ObjectResult<GetSuperAnnuating_Result> GetSuperAnnuating()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSuperAnnuating_Result>("GetSuperAnnuating");
    }


    public virtual ObjectResult<GetForm12BBDocumentList_Result> GetForm12BBDocumentList(Nullable<int> empFormID)
    {

        var empFormIDParameter = empFormID.HasValue ?
            new ObjectParameter("EmpFormID", empFormID) :
            new ObjectParameter("EmpFormID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetForm12BBDocumentList_Result>("GetForm12BBDocumentList", empFormIDParameter);
    }


    public virtual ObjectResult<GetForm12BBList_Result> GetForm12BBList(string fYear)
    {

        var fYearParameter = fYear != null ?
            new ObjectParameter("FYear", fYear) :
            new ObjectParameter("FYear", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetForm12BBList_Result>("GetForm12BBList", fYearParameter);
    }

}

}

