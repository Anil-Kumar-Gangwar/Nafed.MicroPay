@model Nafed.MicroPay.Model.Employee
@{
    Layout = null;
    var message = TempData["Message"] == null ? "" : TempData["Message"].ToString();
    var messageError = TempData["Error"] == null ? "" : TempData["Error"].ToString();
}
<script type="text/javascript">

    function EditSuccess(data) {

        var i=@ViewBag.ActiveTab;

        $('.nav-tabs li:eq(' + i + ') a').attr('data-toggle','tab').tab('show');

        if ('@messageError' != "") {

            var str = '@WebUtility.HtmlEncode(@messageError)';
            str = str.replace(/&amp;lt;/g, "<").replace(/&amp;gt;/g, ">").replace(/&amp;#39;/g, "'");

            $.bootstrapGrowl("<i class='mdi-android-debug-bridge' aria-hidden='true'></i> " + str + "", {
                type: 'warning',
                align: 'center',
                width: 'auto',
                allow_dismiss: true,
                delay: 50000
            });
        }
        if ('@message' != "") {
            $.bootstrapGrowl("<i class='mdi-checkbox-marked-circle-outline' aria-hidden='true'></i> " + '@message', {
                type: 'success',
                align: 'center',
                width: 'auto',
                allow_dismiss: true,
                delay: 20000
            });
        }
    }
</script>


@using (Ajax.BeginForm("_EditGeneralDetails", "Employee", new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "general", OnSuccess = "EditSuccess" }, new { defaultbutton = "submitform" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.EmployeeTypeID)
    @Html.HiddenFor(model => model.DesignationID)
    @*@Html.HiddenFor(model => model.DepartmentID)*@
    @Html.Hidden("SelectedDepartmentID")

    @Html.HiddenFor(model => model.SectionID)
    @Html.HiddenFor(model => model.EmployeeID)
    @*@Html.HiddenFor(model=>model.Name)*@
    @Html.HiddenFor(model => model.EmployeeCode)
    @Html.HiddenFor(model => model.EmpProfilePhotoUNCPath)

    <div class="" style="margin-top:10px;">
        <div class="">
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 mb-12">

                    <div class="row">

                        <div class="col-lg-2 col-md-2 col-sm-12 col-xs-12 text-center">
                            @*<img style="height:150px;width:150px;" class="img-responsive rounded-circle img-thumbnail"
                                 src='@Url.Action("GetImage","Employee",new {imgPath=Model.EmpProfilePhotoUNCPath})' alt="Employee Photo" />*@

                            <img style="height:150px;width:150px;" class="img-responsive rounded-circle img-thumbnail"
                                 src='/@Model.EmpProfilePhotoUNCPath' alt="Employee Photo" />
                        </div>

                        <div class="col-lg-10 col-md-10 col-sm-12 col-xs-12">
                            <div class="form-group">

                                <div class="row">
                                    <div class="col-lg-2 col-md-2 col-sm-12 col-xs-12">
                                        @Html.LabelFor(model => model.EmployeeTypeID, htmlAttributes: new { @class = "control-label" })
                                    </div>

                                    <div class="col-lg-3 col-md-3 col-sm-12 col-xs-12">

                                        @Html.DropDownListFor(model => model.EmployeeTypeID, (IEnumerable<SelectListItem>)ViewBag.EmployeeType, new { @class = "custom-select", @disabled = "disabled" })
                                        @Html.ValidationMessage("EmployeeTypeRequired", "", new { @class = "text-danger" })

                                    </div>

                                    <div class="col-lg-1 col-md-1 col-sm-12 col-xs-12">
                                        Employee :
                                        @*@Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "text-nowrap control-label " })*@
                                    </div>
                                    <div class="col-lg-5 col-md-5 col-sm-12 col-xs-12">
                                        <div class="form-group">
                                            <div class="row">
                                                <div class="col-lg-2 col-md-2 col-sm-12 col-xs-12 text-right mt-2">
                                                    <label>@Html.DisplayFor(model => model.EmployeeCode, new { @class = "form-control" })</label>
                                                    <text>-</text>
                                                </div>
                                                <div class="col-lg-3 col-md-3 col-sm-12 col-xs-12 mr-0">
                                                    @Html.DropDownListFor(model => model.TitleID, (IEnumerable<SelectListItem>)ViewBag.Title, new { @class = "custom-select" })
                                                    @Html.ValidationMessage("TitleRequired", "", new { @class = "text-danger" })
                                                </div>
                                                <div class="col-lg-7 col-md-7 col-sm-12 col-xs-12 pl-lg-0">
                                                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", @placeholder = "Employee Name", @maxlength = "25" } })
                                                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="form-group">

                                <div class="row">
                                    <div class="col-lg-2 col-md-2 col-sm-12 col-xs-12">

                                        @Html.LabelFor(model => model.GenderID, htmlAttributes: new { @class = "control-label required" })
                                    </div>
                                    <div class="col-lg-4 col-md-4 col-sm-12 col-xs-12">
                                        @Html.DropDownListFor(model => model.GenderID, (IEnumerable<SelectListItem>)ViewBag.Gender, new { @class = "custom-select" })
                                        @Html.ValidationMessage("EmployeeGenderRequired", "", new { @class = "text-danger" })
                                    </div>

                                    <div class="col-lg-2 col-md-2 col-sm-12 col-xs-12">

                                        @Html.LabelFor(model => model.FirstDesg, htmlAttributes: new { @class = "control-label " })

                                        @*@Html.LabelFor(model => model.DesignationID, htmlAttributes: new { @class = "control-label  required" })*@

                                    </div>
                                    <div class="col-lg-4 col-md-4 col-sm-12 col-xs-12">

                                        @Html.DropDownListFor(model => model.FirstDesg, (IEnumerable<SelectListItem>)ViewBag.Designation, new { @class = "custom-select" })
                                        @Html.ValidationMessageFor(model => model.FirstDesg, "", new { @class = "text-danger" })

                                        @*@Html.DropDownListFor(model => model.DesignationID, (IEnumerable<SelectListItem>)ViewBag.Designation, new { @class = "custom-select", @disabled = "disabled" })
                                            @Html.ValidationMessage("EmployeeDesignationRequired", "", new { @class = "text-danger" })*@

                                    </div>
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="row">
                                    <div class="col-lg-2 col-md-2 col-sm-12 col-xs-12">

                                        @Html.LabelFor(model => model.OfficialEmail, htmlAttributes: new { @class = "control-label" })

                                    </div>
                                    <div class="col-lg-4 col-md-4 col-sm-12 col-xs-12">

                                        @Html.EditorFor(model => model.OfficialEmail, new { htmlAttributes = new { @class = "form-control", @placeholder = "Offical Email" } })
                                        @Html.ValidationMessageFor(model => model.OfficialEmail, "", new { @class = "text-danger" })

                                    </div>

                                    <div class="col-lg-2 col-md-2 col-sm-12 col-xs-12">

                                        @Html.LabelFor(model => model.FirstBranch, htmlAttributes: new { @class = "control-label " })

                                    </div>

                                    <div class="col-lg-4 col-md-4 col-sm-12 col-xs-12">

                                        @Html.DropDownListFor(model => model.FirstBranch, (IEnumerable<SelectListItem>)ViewBag.Branch, new { @class = "custom-select" })
                                        @Html.ValidationMessageFor(model => model.FirstBranch, "", new { @class = "text-danger" })

                                    </div>
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="row">

                                    <div class="col-lg-2 col-md-2 col-sm-12 col-xs-12">

                                        @Html.LabelFor(model => model.CadreID, htmlAttributes: new { @class = "control-label  required" })
                                    </div>

                                    <div class="col-lg-1 col-md-1 col-sm-12 col-xs-12 pr-0">

                                        @Html.DropDownListFor(model => model.CadreID, (IEnumerable<SelectListItem>)ViewBag.CadreCode, new { @class = "custom-select" })
                                        @Html.ValidationMessage("CadreRequired", "", new { @class = "text-danger" })

                                    </div>
                                    <div class="col-lg-2 col-md-2 col-sm-12 col-xs-12 mt-2">
                                        @Html.LabelFor(model => model.IsCadreOfficer, htmlAttributes: new { @class = "control-label" })

                                    </div>

                                    <div class="col-lg-1 col-md-1 col-sm-12 col-xs-12">

                                        <div class="form-group">
                                            <label class="switch">

                                                @Html.CheckBoxFor(model => model.IsCadreOfficer, new { @class = "form-control" })
                                                <div class="slider round">

                                                </div>
                                            </label>
                                        </div>
                                    </div>

                                    <div class="col-lg-2 col-md-2 col-sm-12 col-xs-12">
                                        @Html.LabelFor(model => model.MobileNo, htmlAttributes: new { @class = "control-label" })


                                    </div>

                                    <div class="col-lg-4 col-md-4 col-sm-12 col-xs-12">

                                        @Html.EditorFor(model => model.MobileNo, new { htmlAttributes = new { @class = "form-control", @placeholder = "Mobile No", @maxlength = "10" } })
                                        @Html.ValidationMessageFor(model => model.MobileNo, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                            </div>
                        </div>

                    </div>

                    <div class="form-group">

                        <div class="row">
                            <div class="col-lg-2 col-md-2 col-sm-2 col-xs-2">

                                @Html.LabelFor(model => model.BranchID, htmlAttributes: new { @class = "control-label required" })
                            </div>
                            <div class="col-lg-3 col-md-3 col-sm-3 col-xs-3">
                                @Html.DropDownListFor(model => model.BranchID, (IEnumerable<SelectListItem>)ViewBag.Branch, new { @class = "custom-select" })
                                @Html.ValidationMessage("BranchRequired", "", new { @class = "text-danger" })

                            </div>
                            <div class="col-lg-1 col-md-1 col-sm-12 col-xs-12">

                                <a class="form-control btn-sm pull-center toggle-tooltip"
                                   style="background-color:#F2F2F2;text-decoration:none;text-align:center;"
                                   href="@Url.Action("Index", "StaffTransfer",new { employeeID = Model.EmployeeID })"
                                   title="Click here, to assign new branch."
                                   id="a_AssignBranch">
                                    ...
                                </a>
                            </div>
                            <div class="col-lg-2 col-md-2 col-sm-2 col-xs-2">

                                @Html.LabelFor(model => model.DepartmentID, htmlAttributes: new { @class = "control-label  required" })
                            </div>
                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-4">

                                @Html.DropDownListFor(model => model.DepartmentID, (IEnumerable<SelectListItem>)ViewBag.Department, new { @class = "custom-select", @onchange = "OnChangeDepartment(this.id)" })

                                @Html.ValidationMessage("DepartmentRequired", "", new { @class = "text-danger" })
                            </div>

                        </div>
                    </div>

                    <div class="form-group">

                        <div class="row">
                            <div class="col-lg-2 col-md-2 col-sm-2 col-xs-12">

                                @Html.LabelFor(model => model.SectionID, htmlAttributes: new { @class = "control-label required" })
                            </div>
                            <div class="col-lg-2 col-md-2 col-sm-2 col-xs-12">

                                @Html.DropDownListFor(model => model.SectionID, (IEnumerable<SelectListItem>)ViewBag.Section, new { @class = "custom-select" })
                                @Html.ValidationMessage("SectionRequired", "", new { @class = "text-danger" })
                            </div>
                            <div class="col-lg-1 col-md-1 col-sm-1 col-xs-12">

                                @Html.LabelFor(model => model.FileNo, htmlAttributes: new { @class = "control-label " })
                            </div>
                            <div class="col-lg-1 col-md-1 col-sm-1 col-xs-12">
                                @Html.EditorFor(model => model.FileNo, new { htmlAttributes = new { @class = "form-control", @placeholder = "File No", @maxlength = "5" } })

                            </div>

                            <div class="col-lg-2 col-md-2 col-sm-12 col-xs-12">
                                @Html.LabelFor(model => model.DesignationID, htmlAttributes: new { @class = "control-label  required" })

                            </div>
                            <div class="col-lg-3 col-md-3 col-sm-12 col-xs-12">

                                @Html.DropDownListFor(model => model.DesignationID, (IEnumerable<SelectListItem>)ViewBag.Designation, new { @class = "custom-select", @disabled = "disabled" })
                                @Html.ValidationMessage("EmployeeDesignationRequired", "", new { @class = "text-danger" })


                            </div>

                            <div class="col-lg-1 col-md-1 col-sm-12 col-xs-12">

                                <a class="form-control btn-sm pull-center toggle-tooltip"
                                   style="background-color:#F2F2F2;text-decoration:none;text-align:center;"
                                   href="@Url.Action("Index", "DesignationAssignment",new { employeeID = Model.EmployeeID })"
                                   title="Click here, to assign new designation."
                                   id="a_AssignDesignation">
                                    ...
                                </a>
                            </div>
                        </div>

                    </div>

                    <div class="form-group">

                        <div class="row">
                            <div class="col-lg-2 col-md-2 col-sm-2 col-xs-2">
                                @Html.LabelFor(model => model.PayScale, htmlAttributes: new { @class = "control-label" })
                            </div>
                   
                            <div class="col-xl-4 col-lg-4 col-md-4 col-sm-12 col-xs-12 labelvalue label-ellipsis" data-toggle="tooltip" title="@Model.PayScale">
                                @(Model.PayScale ?? "Not Available")
                            </div>

                            <div class="col-lg-2 col-md-2 col-sm-2 col-xs-2">
                                @Html.LabelFor(model => model.DOJ, htmlAttributes: new { @class = "control-label required" })

                            </div>
                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-4">
                                @Html.TextBoxFor(model => model.Pr_Loc_DOJ, String.Format("{0:dd/MM/yyyy}", Model.Pr_Loc_DOJ), new { @type = "text", @class = "form-control datepicker", id = "Pr_Loc_DOJ", @placeholder = "dd/mm/yyyy" })
                                @*@Html.EditorFor(model => model.Pr_Loc_DOJ, new { htmlAttributes = new { @class = "form-control", @placeholder = "Date of Joining", type="date",  max = DateTime.Now.ToString("yyyy-MM-dd") } })*@
                                @Html.ValidationMessageFor(model => model.Pr_Loc_DOJ, "", new { @class = "text-danger" })
                            </div>

                        </div>
                    </div>

                    <div class="form-group">

                        <div class="row">
                            <div class="col-lg-2 col-md-2 col-sm-2 col-xs-2">

                                @Html.LabelFor(model => model.SL_No, htmlAttributes: new { @class = "control-label " })
                            </div>
                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-4">
                                @Html.EditorFor(model => model.SL_No, new { htmlAttributes = new { @class = "form-control", @placeholder = "Serial No." } })

                            </div>

                            <div class="col-lg-2 col-md-2 col-sm-2 col-xs-2">

                                @Html.LabelFor(model => model.Pr_Loc_DOJ, htmlAttributes: new { @class = "control-label " })

                            </div>

                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-4">
                                @*@Html.EditorFor(model => model.DOJ, new { htmlAttributes = new { @class = "form-control", @placeholder = "Date of Joining on New Desig/Branch", max = DateTime.Now.ToString("yyyy-MM-dd") } })*@
                                @Html.TextBoxFor(model => model.DOJ, String.Format("{0:dd/MM/yyyy}", Model.DOJ), new { @type = "text", @class = "form-control datepicker", id = "DOJ", @placeholder = "dd/mm/yyyy" })
                            </div>

                        </div>
                    </div>

                    <div class="form-group">

                        <div class="row">
                            <div class="col-lg-2 col-md-2 col-sm-2 col-xs-2">

                                @Html.LabelFor(model => model.ConfirmationDate, htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-4">
                                @Html.TextBoxFor(model => model.ConfirmationDate, String.Format("{0:dd/MM/yyyy}", Model.ConfirmationDate), new { @type = "text", @class = "form-control datepicker", id = "ConfirmationDate", @placeholder = "dd/mm/yyyy" })
                                @*@Html.EditorFor(model => model.ConfirmationDate, new { htmlAttributes = new { @class = "form-control", @placeholder = "Confirmation Date" } })*@
                            </div>

                            <div class="col-lg-2 col-md-2 col-sm-2 col-xs-2">
                                @Html.LabelFor(model => model.Sen_Code, htmlAttributes: new { @class = "control-label " })

                            </div>
                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-4">

                                @Html.EditorFor(model => model.Sen_Code, new { htmlAttributes = new { @class = "form-control", @placeholder = "Seniority Code", @maxlength = "3" } })
                            </div>

                        </div>
                    </div>

                    <div class="form-group">
                        <div class="row">

                            <div class="col-lg-2 col-md-2 col-sm-2 col-xs-2">

                                @Html.LabelFor(model => model.CategoryID, htmlAttributes: new { @class = "control-label " })
                            </div>
                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-4">

                                @Html.DropDownListFor(model => model.CategoryID, (IEnumerable<SelectListItem>)ViewBag.Category, new { @class = "custom-select" })
                            </div>

                            <div class="col-lg-2 col-md-2 col-sm-2 col-xs-2">

                                @Html.LabelFor(model => model.divison, htmlAttributes: new { @class = "control-label " })
                            </div>

                            <div class="col-lg-3 col-md-3 col-sm-3 col-xs-3">

                                <div class="row">

                                    <div class="col-sm-5">
                                        @Html.CheckBoxFor(model => model.IsRM, new { @id = "IsRM" })
                                        @Html.LabelFor(model => model.IsRM, new { @for = "IsRM" })

                                    </div>

                                    <div class="col-sm-7">
                                        @Html.CheckBoxFor(model => model.IsBM, new { @id = "IsBM" })
                                        @Html.LabelFor(model => model.IsBM, new { @for = "IsBM" })

                                    </div>
                                </div>


                            </div>

                            <div class="col-lg-1 col-md-1 col-sm-12 col-xs-12">

                                <a class="form-control btn-sm pull-center toggle-tooltip"
                                   style="background-color:#F2F2F2;text-decoration:none;text-align:center;"
                                   href="@Url.Action("Index", "BranchTransfer",new { employeeID = Model.EmployeeID })"
                                   title="Click here, to assign new branch."
                                   id="a_AssignBranch">
                                    ...
                                </a>
                            </div>
                        </div>
                    </div>

                    <div class="form-group">

                        <div class="row">
                            <div class="col-lg-2 col-md-2 col-sm-2 col-xs-2">
                                @Html.LabelFor(model => model.IsJoinAfterNoon, htmlAttributes: new { @class = "control-label " })

                            </div>
                            <div class="col-lg-1 col-md-1 col-sm-1 col-xs-1">
                                <div class="form-group">
                                    <label class="switch">
                                        @Html.CheckBoxFor(model => model.IsJoinAfterNoon, new { @class = "form-control" })
                                        <div class="slider round">
                                        </div>
                                    </label>
                                </div>
                            </div>

                        </div>
                    </div>

                    <div class="panel panel-default">
                        <div class="panel-heading">Mode of Payment</div>
                        <div class="panel-body">

                            <div class="form-group">

                                <div class="row">

                                    <div class="col-lg-4 col-md-4 col-sm-12 col-xs-12">
                                        <div class="container-fluid p-0">

                                            <div class="custom-control custom-radio p-0">

                                                @Html.RadioButtonFor(model => model.modOfPayment, "Bank", new { id = "Bank" })
                                                @Html.Label("Bank", new { @for = "Bank" })

                                                @Html.RadioButtonFor(model => model.modOfPayment, "Cash", new { id = "Cash" })
                                                @Html.Label("Cash", new { @for = "Cash" })

                                                @*@Html.ValidationMessageFor(m => Model.enumTrainerType, "", new { @class = "text-danger" })*@

                                            </div>
                                        </div>

                                    </div>



                                </div>

                            </div>


                            <div class="form-group" id="div-bank-dtls">
                                <div class="row">
                                    <div class="col-lg-2 col-md-2 col-sm-2 col-xs-2">
                                        @Html.LabelFor(model => model.BankCode, htmlAttributes: new { @class = "control-label" })
                                    </div>
                                    <div class="col-lg-4 col-md-4 col-sm-4 col-xs-4">
                                        @Html.HiddenFor(model => model.BankCode)
                                        @Html.DropDownListFor(model => model.BankCode, new SelectList(ViewBag.Banks, "BankCode", "BankName"), "Select", new { @class = "custom-select", @disabled = "disabled" })
                                        @Html.ValidationMessage("BankRequired", "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-lg-2 col-md-2 col-sm-2 col-xs-2">
                                        @Html.LabelFor(model => model.BankAcNo, htmlAttributes: new { @class = "control-label" })
                                    </div>
                                    <div class="col-lg-4 col-md-4 col-sm-4 col-xs-4">
                                        @Html.HiddenFor(model => model.BankAcNo)
                                        @Html.EditorFor(model => model.BankAcNo, new { htmlAttributes = new { @class = "form-control integerOnly", @placeholder = "Bank Account No", @maxlength = "16", @disabled="disabled" } })
                                        @Html.ValidationMessage("BankAcNoRequired", "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>


                        </div>
                    </div>
                    <div class="form-group">

                        <span class="pull-right">
                            @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-light btn-md toggle-tooltip", @title = "Click here, to redirect on list page" })
                            <input type="submit" value="Update" class="btn btn-info btn-md pull-center toggle-tooltip" title="Click here, to update this record" />
                        </span>
                    </div>
                </div>
            </div>
        </div>
    </div>

}

<script type="text/javascript">
    function OnChangeDepartment(controlID) {

        $("#SelectedDepartmentID").val($("#"+controlID).val());
    }

    $("#DOJ").datepicker({ dateFormat: 'dd/mm/yy', changeYear: true, maxDate: new Date() });
    $("#Pr_Loc_DOJ").datepicker({ dateFormat: 'dd/mm/yy', changeYear: true });
    $("#ConfirmationDate").datepicker({ dateFormat: 'dd/mm/yy', changeYear: true });
</script>