@model List<Nafed.MicroPay.Model.LeaveEncashment>
@using Nafed.MicroPay.Common;
@{
    var DAPerc = (Model != null && Model.Count > 0) ? "DA @ " + Model.First().DAPercentage + "%" : "DA @ 0%";
    var DAPercLatest = (Model != null && Model.Count > 0) ? "DA @ " + Model.First().DAPercentageLatest + "%" : "DA @ 0%";
}
<table id="tblGrid" class="table table-centered table-striped dt-responsive w-100">
    <thead>
        <tr>
            <th width="3%">
                S.No.
            </th>
            <th width="12%">
                Name/Branch
            </th>
            <th width="6%">
                EL as on date
            </th>
            <th width="5%">
                No. of days
            </th>
            <th width="5%">
                Balance EL
            </th>
            <th width="6%">
                Basic for one month
            </th>
            <th width="5%">
                Basic
            </th>
            <th width="5%">
                @DAPerc
            </th>
            <th width="5%">
                Gross Amt
            </th>
            <th width="5%">
                @DAPercLatest
            </th>
            <th width="5%">
                Gross Amt
            </th>
            <th width="5%">
                Difference
            </th>
            <th>
                TDS
            </th>
            <th width="5%">
                Net Amt
            </th>
            <th width="5%">
                Order No.
            </th>
            <th width="5%">
                Order Date
            </th>
        </tr>
    </thead>
    <tbody>
        @{
            int index = 1;
            if (Model != null && Model.Count > 0)
            {
                for (int i = 0; i < Model.Count; i++)
                {
                    var grossAmt = Convert.ToDecimal(Model[i].Basic + Model[i].DA);
                    var grossAmtLatest = Convert.ToDecimal(Model[i].Basic + Model[i].DALatest);
                    Model[i].GrossAmount = grossAmt;
                    Model[i].GrossAmountLatest = grossAmtLatest;
                    var diff = Convert.ToDecimal(Model[i].GrossAmountLatest - Model[i].GrossAmount);
                    Model[i].DADifference = diff;
                    var netAmt = (diff - Model[i].TDS ?? 0);
                    Model[i].NetAmount = netAmt;
                    <tr>
                        <td width="3%">@index</td>
                        <td width="12%">
                            <span>@Model[i].EmployeeCode <text>-</text> @Model[i].EmployeeName</span>
                            <br /> <span class="text-muted">@Model[i].Branch</span>
                        </td>
                        <td width="5%" class="text-center">@Model[i].ELBalAsofnow</td>
                        <td width="5%" class="text-center">@Model[i].NoofDays.ToString("0")</td>
                        <td width="5%" class="text-center">@Model[i].ELBal</td>
                        <td width="5%" class="text-right">@Model[i].BasicForMonth.ToString("0.00")</td>
                        <td width="5%" class="text-right">@Model[i].Basic.ToString("0.00")</td>
                        <td width="5%" class="text-right">@Model[i].DA.ToString("0.00")</td>
                        <td width="5%" class="text-right">@Model[i].GrossAmount.ToString("0.00")</td>
                        <td width="5%" class="text-right">@Model[i].DALatest.ToString("0.00")</td>
                        <td width="5%" class="text-right">@Model[i].GrossAmountLatest.ToString("0.00")</td>
                        @Html.HiddenFor(model => Model[i].EmployeeCode)
                        @Html.HiddenFor(model => Model[i].EmployeeName)
                        @Html.HiddenFor(model => Model[i].Branch)
                        @Html.HiddenFor(model => Model[i].NoofDays)
                        @Html.HiddenFor(model => Model[i].ELBal)
                        @Html.HiddenFor(model => Model[i].BasicForMonth)
                        @Html.HiddenFor(model => Model[i].Basic)
                        @Html.HiddenFor(model => Model[i].DA, new { Name = "da" })
                        @Html.HiddenFor(model => Model[i].DAPercentage)
                        @Html.HiddenFor(model => Model[i].GrossAmount)
                        @Html.HiddenFor(model => Model[i].GrossAmountLatest)
                        @Html.HiddenFor(model => Model[i].DALatest)
                        @Html.HiddenFor(model => Model[i].DAPercentageLatest)
                        @Html.HiddenFor(model => Model[i].DADifference, new { Name = "diff" })
                        @Html.HiddenFor(model => Model[i].EmployeeId, new { Name = "empId" })
                        @Html.HiddenFor(model => Model[i].TDSYear, new { Name = "tDSYear" })
                        @Html.HiddenFor(model => Model[i].NetAmount, new { id = "netAmt_" + i, Name = "netAmt" })
                        <td class="text-right">@Model[i].DADifference.ToString("0.00")</td>
                        <td class="text-right">
                            @Html.TextBoxFor(model => Model[i].TDS, htmlAttributes: new { @class = "from-control-sm text-right call-tds", @style = "width:70px", @type = "number", @step = "0.01", @max = "9999999", @onblur = "calNetValue(this,'" + i + "','" + Model[i].DADifference + "')" })
                        </td>
                        <td width="5%" class="text-right" id="tdsnet_@i">@Model[i].NetAmount.ToString("0.00")</td>
                        <td width="5%">@Model[i].OrderNo</td>
                        <td width="5%">@(Model[i].OrderDate.HasValue ? Model[i].OrderDate.Value.ToShortDateString() : null) </td>
                    </tr>
                    index++;
                }
            }

        }
    </tbody>
</table>

<script>
    ///==== Adding jquery datatable reference to all master grid ====
    var table = $('#tblGrid').DataTable({
    });
    $('#tblGrid_length').find('select').addClass('custom-select');
    //========= End==================================================

    function calNetValue(cntrl, indx, grossAmt) {
        var tds = parseInt(cntrl.value);
        var gsrAmnt = parseInt(grossAmt);
        let netAmt = (gsrAmnt - tds).toFixed(2);
        $("#netAmt_" + indx).val(netAmt);
        $("#tdsnet_" + indx).html(netAmt);

    }
</script>