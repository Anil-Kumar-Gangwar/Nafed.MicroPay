@using MicroPay.Web.Models
@model FileTrackingViewModel
@{
    TempData["DocumentFiles"] = Model;
}
<div class="row">
    <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
        @Html.HiddenFor(model => model.processWorkFlow.Remark)
        @Html.HiddenFor(model => model.processWorkFlow.Purpose)
        @Html.HiddenFor(model => model.fileManagement.FilePutup)
        <h4>Forward File (<b>File No. </b>- @Model.processWorkFlow.Purpose,<b> File Subject </b>- @Model.processWorkFlow.Remark)</h4>

    </div>
</div>
<hr />

<div class="row">
    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
        <div class="row">
            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 mb-2">
                <table id="tblGrid" class="table table-centered table-striped dt-responsive w-100">
                    <thead>
                        <tr>
                            <th>
                                #
                            </th>
                            <th>
                                Forwarded By
                            </th>
                            <th>
                                Forwarded To
                            </th>
                            <th>
                                Forwarded On
                            </th>
                            <th>
                                Turn Around Time
                            </th>
                            <th>
                                Remarks
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            if (Model.fileManagementList != null && Model.fileManagementList.Count > 0)
                            {
                                var sno = 1;
                                for (int i = 0; i < Model.fileManagementList.Count; i++)
                                {
                                    <tr>
                                        <td> @sno</td>
                                        <td>
                                            @Html.HiddenFor(model => model.fileManagementList[i].FileID)

                                            @Model.fileManagementList[i].SenderName
                                        </td>
                                        <td>

                                            @Model.fileManagementList[i].ReceiverName
                                        </td>
                                        <td>
                                            @if (Model.fileManagementList[i].SendDate.HasValue)
                                            {
                                                @Model.fileManagementList[i].SendDate.Value.ToString("dd-MM-yyyy hh:mm tt")
                                            }
                                        </td>
                                        <td>
                                            @Model.fileManagementList[i].TAT
                                        </td>

                                        <td style="width:20%" id="@("remark_"+i)">
                                            @if (!string.IsNullOrEmpty(Model.fileManagementList[i].Remarks))
                                            {
                                                if (@Model.fileManagementList[i].Remarks.Length > 50)
                                                {
                                                    @Html.HiddenFor(model => @Model.fileManagementList[i].Remarks)
                                                    <a href="#" class="toggle-tooltip" title="Click here to see Remark">@Model.fileManagementList[i].Remarks.Substring(0, 50)...</a>
                                                }
                                                else
                                                {
                                                    @Model.fileManagementList[i].Remarks
                                                }
                                            }                                            
                                        </td>

                                    </tr>
                                    sno++;
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="6" class="text-center"> No Record Found.</td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>

    </div>

    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">

        @using (Ajax.BeginForm("TabFileForward", "GenerateFileNo", new AjaxOptions() { HttpMethod = "POST", OnSuccess = "onSuccessFile" }, new { enctype = "multipart/form-data" }))
            {
            <link href="~/Content/jquery.datetimepicker.min.css" rel="stylesheet" />
            <script src="~/Scripts/jquery.datetimepicker.full.min.js"></script>
            @Html.AntiForgeryToken()
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <div class="row">
                        <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12 mb-2">
                            @Html.HiddenFor(model => model.processWorkFlow.ReferenceID)
                            @Html.HiddenFor(model => model.processWorkFlow.WorkflowID)
                            @Html.Label("Department/Section", htmlAttributes: new { @class = "control-label required" })
                        </div>
                        <div class="col-lg-8 col-md-8 col-sm-8 col-xs-12 mb-2">
                            @Html.DropDownListFor(model => model.processWorkFlow.ReceiverDepartmentID, new SelectList(ViewBag.Department, "id", "value"), "Select", new { @class = "custom-select", @onchange = "BindEmployeeOnDepartment(this)" })
                            @Html.ValidationMessage("DepartmentModelError", "", new { @class = "text-danger" })
                            <span id="ReceiverDepartmentError"></span>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12 mb-2">
                            @Html.Label("Forward To", htmlAttributes: new { @class = "control-label required" })
                        </div>
                        <div class="col-lg-8 col-md-8 col-sm-8 col-xs-12 mb-2">
                            @Html.DropDownListFor(model => model.processWorkFlow.ReceiverID, new SelectList(ViewBag.Employee, "id", "value"), "Select", new { @class = "custom-select" })
                            @Html.ValidationMessage("EmployeeModelError", "", new { @class = "text-danger" })
                            <span id="EmployeeError"></span>

                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12 mb-2">
                            @Html.Label("Forwarding DateTime", htmlAttributes: new { @class = "control-label required" })
                        </div>
                        <div class="col-lg-8 col-md-8 col-sm-8 col-xs-12 mb-2">
                            @Html.EditorFor(model => model.processWorkFlow.Senddate,  new { htmlAttributes = new { @class = "form-control required", @type = "dateTimePicker", @placeholder = "dd-mm-yyyy hh:mm AM/PM", @autocomplete = "off" } })
                            @Html.ValidationMessage("SendDateModelError", "", new { @class = "text-danger" })
                            <span id="EmployeeError"></span>

                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12 mb-2">
                            @Html.Label("Remarks", htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-lg-8 col-md-8 col-sm-8 col-xs-12 mb-2">
                            @Html.TextAreaFor(model => model.processWorkFlow.Scomments, htmlAttributes: new { @class = "form-control", @maxlength = "1000", @cols = "60", @rows = "6", @style = "min-height:80px;max-height:80px;" })
                            @Html.ValidationMessage("RemarkModelError", "", new { @class = "text-danger" })
                            <span id="RemarkError"></span>

                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 mb-2">
                            <div class="row">
                                <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12 text-left pb-0">                                    
                                    <span id="documentnameError"></span>
                                    <span id="documentFileError"></span>
                                    <span id="sizeError"></span>
                                </div>
                                <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12 text-right pb-2">
                                    <input type="button" value="Add" id="btnAddRowExper" class="btn btn-info btn-md pull-center toggle-tooltip btn-sectionAddRow"
                                           title="Click here, to add new row." />
                                    <input type="button" value="Remove" class="delete-row btn btn-danger btn-xs"
                                           title="Click here, to delete seleted row." />
                                </div>

                                <div id="div-form-documents-grid" class="col-lg-12 col-md-11 col-sm-11 col-xs-12 mb-2">

                                    <table id="tblDocument" class="table table-bordered table-centered dt-responsive w-100">
                                        <thead>
                                            <tr>
                                                <th class="text-center" style="width:5%">#</th>
                                                <th class="text-center" style="width:35%">Document Name</th>
                                                <th class="text-center" style="width:50%">Document</th>
                                            </tr>
                                        </thead>
                                        <tbody></tbody>
                                    </table>

                                </div>
                            </div>
                            <div class="col-lg-12 col-md-11 col-sm-11 col-xs-12">
                                <label class="font-weight-bold text-danger">[FileType=.jpg, .jpeg, .png,.pdf, .xlsx, .xls, .doc, .docx, Size <= 5MB, single document] <br /></label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="form-group">
                <span class="pull-right">
                    <input type="button" value="Forward" id="btnSubmit" class="btn btn-info btn-md pull-center toggle-tooltip" />
                </span>
            </div>

        }
    </div>
</div>

<script type="text/javascript">
    $("#processWorkFlow_Senddate").val('');
    $('.toggle-tooltip').tooltip();

    var mintime = new Date($.now())
    mintime.setHours(mintime.getHours());
    var maxtime = new Date($.now())
    var year = new Date().getYear;
    var month = new Date().getMonth;
    var day = new Date().getDay;
    maxdate = new Date(year, month, day + 3); 
    maxtime.setHours(maxtime.getHours() + 3);
 
    $('#processWorkFlow_Senddate').datetimepicker({
        format: 'Y/m/d H:i',
        minDate: new Date(),
        maxDate: '+1970/01/04',
        minTime: mintime        
    });
    function BindEmployeeOnDepartment(e) {
        if ($("#processWorkFlow_ReceiverDepartmentID").val() != "") {
            var departmentId = 0;
            departmentId = $("#processWorkFlow_ReceiverDepartmentID").val();

            $("#processWorkFlow_ReceiverID").html("");
            $("#ReceiverDepartmentError").html("");
            if (departmentId > 0) {
                jQuery.post("@Url.Action("GetEmployeeByDepartment", "GenerateFileNo")", {
                    departmentID: departmentId
                }).done(function (data) {

                    if (data.employees != "") {
                        $("#processWorkFlow_ReceiverID").html("");
                        $.each(data.employees, function (key, value) {
                            $("#processWorkFlow_ReceiverID").append($("<option></option>").val(value.Value).html(value.Text));
                        });
                    }
                });
            } else {
                $("#processWorkFlow_ReceiverID").append($("<option></option>").val(0).html('Select'));
            }
        }
        else {
            if ($("#processWorkFlow_ReceiverID").val() == "") {
                $("#ReceiverDepartmentError").html("Please select Department").css("color", "red");
            }
        }
    }


   $("#btnAddRowExper").click(function () {
        debugger;
        $.ajax({
            url: "@Url.Action("_AddDocumentRow", "GenerateFileNo")",
            type: "POST",
            contentType: false, // Not to set any content header
            processData: false, // Not to process data

            success: function (result) {

                tableBody = $("#tblDocument tbody");
                tableBody.append(result.htmlData);
            },
            error: function (err) {
                alert(err.statusText);
            }
        });
    });

    $(".delete-row").click(function () {
        $("#tblDocument tbody").find('input[name="record"]').each(function () {
            if ($(this).is(":checked")) {
                $(this).parents("tr").remove();

            }
        });
    });


    $(document).ready(function () {
        $('#btnSubmit').click(function () {
            debugger;
            if ($("#processWorkFlow_ReceiverDepartmentID").val() != 0 && $("#processWorkFlow_ReceiverID").val() != 0) {
                var docerror = 0;
                var fileerror = 0;
                var typeeerror = 0;
                var sizeerror = 0;
                var error = 0;
                var ReferenceID = 0;
                ReferenceID = $("#processWorkFlow_ReferenceID").val();
                var WorkflowID = 0;
                WorkflowID = $("#processWorkFlow_WorkflowID").val();

                var revdepartmentId = 0;
                revdepartmentId = $("#processWorkFlow_ReceiverDepartmentID").val();
                var receiverID = 0;
                receiverID = $("#processWorkFlow_ReceiverID").val();
                var Scomments = "";
                Scomments = $("#processWorkFlow_Scomments").val();

                var sendDate = new Date($("#processWorkFlow_Senddate").val());
                var putupdate = new Date($('#fileManagement_FilePutup').val().trim());
                if (sendDate < putupdate) {
                    $("#EmployeeError").html("Forwarding date can't be less then File Putup date.").css("color", "red");
                    return false;
                }

                // Create FormData object
                if (window.FormData !== undefined)
                    var fileData = new FormData();

                $("#tblDocument tr.filesvalidate").each(function () {

                    var filename = $(this).find(".name").val();
                    if (filename == "") {
                        docerror++;
                    }
                    else {
                        $("#documentnameError").html("")
                    }

                    if ($(this).find(".file").get(0).files.length > 0) {

                        // Looping over all files and add it to FormData object
                        var fileUpload = $("#Files");
                        var lg = fileUpload[0].files.length; // get length
                        var items = fileUpload[0].files;
                        for (var k = 0; k < lg; k++) {

                            var filesze = items[k].size;
                            var fileName = items[k].name;
                            var ext = fileName.substr(fileName.lastIndexOf('.') + 1).toLowerCase();
                            if (!(ext == "xlsx" || ext == "xls" || ext == "jpg" || ext == "jpeg" || ext == "png" || ext == "pdf" || ext == "doc" || ext == "docx")) {
                                typeeerror++;
                            }
                            if (filesze > 5000000) {  // 5MB
                                sizeerror++;
                            }
                            fileData.append(items[k].name, items[k]);
                            fileData.append("FileName", filename);
                        } 
                    }
                    else {
                        fileerror++;

                    }
                });
                    if (docerror > 0) {
                        $("#documentnameError").html("Enter Document Name.").css("color", "red");
                        return false;
                    }
                    if (fileerror > 0) {
                        $("#documentFileError").html("Please Upload Document").css("color", "red");
                        return false;
                    }
                    if (sizeerror > 0) {
                        $("#sieeError").html("Please select image size less than 5MB.").css("color", "red");
                        return false;
                    }

                    fileData.append('revdepartmentId', revdepartmentId);
                    fileData.append('receiverID', receiverID);
                    fileData.append('Scomments', Scomments);
                    fileData.append('ReferenceID', ReferenceID);
                    fileData.append('WorkflowID', WorkflowID);
                    fileData.append('sendDate', sendDate);
                    $.ajax({
                        url: "@Url.Action("TabFileForward", "GenerateFileNo")",
                        type: "POST",
                        contentType: false, // Not to set any content header
                        processData: false, // Not to process data
                        data: fileData,
                        success: function (result) {
                            if (result.status == 1) {
                                $("#div-inbox").modal("hide");
                                commonMessage(result.type, result.msg);
                                $("#TabInbox").load("@Url.Action("GetInboxFiles", "GenerateFileNo")");
                                $("#TabOutbox").load("@Url.Action("GetOutboxFiles", "GenerateFileNo")");

                            }
                        }
                    });              
            }
            else {
                if ($("#processWorkFlow_ReceiverDepartmentID").val() == 0) {
                    $("#ReceiverDepartmentError").html("Please Select Department.").css("color", "red");
                }
                if ($("#processWorkFlow_ReceiverID").val() == 0) {
                    $("#EmployeeError").html("Please Select Employee.").css("color", "red");
                }
            }
        });
    });

    $('#tblGrid tr td').click(function () {
        var cid = $(this).attr('id');
        var res = cid.substring(0, 6);
        var id_indx = cid.substring(7);
        var filemanagmtid = "fileManagementList_0__Remarks";
        var filemgn = filemanagmtid.substring(0, 19);
        var hdnremark = filemgn + id_indx + "__Remarks";
        if (res == "remark") {
            var rmk = $("#" + hdnremark).val();
            if (rmk.length > 50) {
                $("#div-remarks").text(rmk)
                $('#div-remarks-popup').modal('show');
            }
        }
    });

    function onSuccessFile(data) {
        debugger;
        if (data.status == 1) {
            $("#div-inbox").modal("hide");
            commonMessage(data.type, data.msg);
            $("#TabInbox").load("@Url.Action("GetInboxFiles", "GenerateFileNo")");


        }
        else if (data.status == 0) {
            $("#div-form-documents-grid").html(data.htmlData);
        }
    }
</script>



