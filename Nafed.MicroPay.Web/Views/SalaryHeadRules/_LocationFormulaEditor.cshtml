
@using Nafed.MicroPay.Model;
@model SalaryHead

@{

    var formulaRowVisibilityClass = !Model.FormulaColumn ? "hide" : null;
    var fixedValueRowVisibilityClass = !Model.FixedValueFormula ? "hide" : null;

    //var updatedTargetID = Model.SelectedBranchID == 0 ? "div-branch-sal-head-rule-form" : null;

}

@using (Ajax.BeginForm("_LocationDependentFormula", "SalaryHeadRules", new AjaxOptions { HttpMethod = "POST", OnSuccess = "OnLocFormulaSuccess"
}, new { defaultbutton = "submitform" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.FieldName)
    @Html.HiddenFor(model => model.LookUpHead)
    @Html.HiddenFor(model => model.LookUpHeadName)
    @Html.HiddenFor(model=>model.CreatedOn)
    @Html.HiddenFor(model=>model.CreatedBy)
    @Html.HiddenFor(model=>model.SelectedBranchID)
    @Html.HiddenFor(model=>model.BranchFormulaID)
    @Html.HiddenFor(model=>model.EmployeeTypeID)
    @Html.Hidden("BranchLookUpHeadName")
    @Html.Hidden("BranchLookUpHead")


    <div class="form-group">
        <div class="row">

            <div class="col-lg-2 col-md-2 col-sm-2 col-xs-12">

                @Html.LabelFor(model => model.headFields, new { @class = "control-label mt-2" })
            </div>
            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">

                @*<label class="control-label mt-2 text-bold">@Model.FieldName </label>*@

                <h6 class="mt-2">@Model.FieldName</h6>

                @*@Html.DropDownListFor(model => model.headFields, new SelectList(Model.headFields, "FieldName", "FieldDesc"), "Select", new { @class = "custom-select" })*@
            </div>
            <div class="col-lg-2 col-md-2 col-sm-2 col-xs-12">
                @Html.LabelFor(model => model.BranchList, new { @class = "control-label mt-2 required" })

            </div>
            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">

                @if (Model.SelectedBranchID > 0)
                {

                    @Html.DropDownListFor(model => model.SelectedBranchID, new SelectList(Model.BranchList, "id", "value"), "Select", new { @class = "custom-select", @disabled= "disabled" })
                }
                else
                {
                    @Html.DropDownList("ddlBranchList", new SelectList(Model.BranchList, "id", "value"), "Select", new { @class = "custom-select", @onChange = "BranchChange(this.id);" })
                }

                  @Html.ValidationMessage("branchIDRequired", "", new { @class = "text-danger" })
                  @Html.ValidationMessage("branchHeadFieldRuleExists", "", new { @class = "text-danger" })
             </div>

        </div>
    </div>

            <div class="form-group @fixedValueRowVisibilityClass">

                <div class="row">

                    <div class="col-lg-2 col-md-2 col-sm-2 col-xs-12">
                        @Html.RadioButtonFor(model => model.formulaType, "FixedValueFormula", new { id = "FixedValueFormula_1", @class = "mr-0 mt-2 " })
                        @Html.LabelFor(model => model.FixedValueFormula, new { @for = "FixedValueFormula_1", @class = "control-label col-sm-10 mt-2 pr-0 pl-0" })

                    </div>
                    <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                        @Html.EditorFor(model => model.FixedValue, new { htmlAttributes = new { @class = "form-control text-right",@type="number",@step= "0.01" } })
                        
                    </div>
                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                         @Html.ValidationMessageFor(model => model.FixedValue, "", new { @class = "text-danger" }) 
                          
                    </div>
                    @*<div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">

                    </div>*@

                </div>
            </div>

            <div class="form-group @formulaRowVisibilityClass">

                <div class="row">
                    <div class="col-lg-2 col-md-2 col-sm-2 col-xs-12">
                        @Html.RadioButtonFor(model => model.formulaType, "FormulaColumn", new { id = "FormulaColumn_1", @class = "mr-0 mt-2 " })
                        @Html.LabelFor(model => model.FormulaColumn, new { @for = "FormulaColumn_1", @class = "control-label col-sm-10 mt-2 pr-0 pl-0" })

                    </div>
                    <div class="col-lg-9 col-md-9 col-sm-9 col-xs-12">

                        @Html.EditorFor(model => model.FormulaText, new { htmlAttributes = new { @class = "form-control toggle-tooltip", @readOnly="readOnly", title=Model.FormulaText  @*@disabled = "disabled"*@ } })
                    </div>


                    <div class="col-lg-1 col-md-1 col-sm-1 col-xs-12" id="div-loc-formula-editor">


                        @*<input type="button" value="..." style="background-color:#F2F2F2;" class="form-control" />*@

                        <a data-ajax="true" class="form-control btn-sm pull-center toggle-tooltip"
                           style="background-color:#F2F2F2;text-decoration:none;text-align:center;"
                           href="@Url.Action("_FormulaEditor", "SalaryHeadRules",new { fieldName = Model.FieldName,branchHeadFormulaID= Model.BranchFormulaID ,employeeTypeID= Model.EmployeeTypeID })"
                           method="GET" title="Click here, to create new formula"
                           data-ajax-update="#div-fm" data-ajax-mode="replace"
                           data-backdrop="static" data-keyboard="false"
                           id="a_formulaEditor" data-toggle="modal" data-target="#FormulaModel">
                            ...
                        </a>

                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="row">
                    <div class="col-lg-2 col-md-2 col-sm-2 col-xs-12">

                        @Html.LabelFor(model => model.LowerRange, new { @class = "control-label mt-2 font-weight-bold" })

                    </div>
                    <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">

                        @Html.EditorFor(model => model.LowerRange, new { htmlAttributes = new { @class = "form-control text-right", @type = "number", @step = "0.01" } })
                        @Html.ValidationMessageFor(model => model.LowerRange, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-lg-2 col-md-2 col-sm-2 col-xs-12">

                        @Html.LabelFor(model => model.UpperRange, new { @class = "control-label mt-2 font-weight-bold" })
                    </div>
                    <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                        @Html.EditorFor(model => model.UpperRange, new { htmlAttributes = new { @class = "form-control text-right", @type = "number", @step = "0.01" } })
                        @Html.ValidationMessageFor(model => model.UpperRange, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="row">
                    <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                        <input type="submit" value="Add" id="submitform" class="btn btn-info btn-md pull-right toggle-tooltip" />
                    </div>
                </div>
            </div>

}

<script type="text/javascript">

    function BranchChange(dropDownID) {
        var selectedBranchID = $("#" + dropDownID).val();
        $("#SelectedBranchID").val(selectedBranchID);
    }

    $('input[type=radio][name=formulaType]').change(function () {
        var checkedRadio = this.value; //alert(checkedRadio);
        if (checkedRadio == "FormulaColumn") {
            $("#div-loc-formula-editor").removeClass("hide");
        }
        else if (checkedRadio == "FixedValueFormula") {
            $("#div-loc-formula-editor").addClass("hide");
        }
    });


</script>