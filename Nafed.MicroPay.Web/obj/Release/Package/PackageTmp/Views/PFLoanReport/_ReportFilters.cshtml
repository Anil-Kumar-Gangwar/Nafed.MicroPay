@using Nafed.MicroPay.Model
@model PFLoanReportFilters

@{
    var yearDDl = Enumerable.Range(2005, (DateTime.Now.Year - 2005) + 1).
                                  Select(i => new SelectListModel { id = i, value = i.ToString() }).OrderBy(x => x.value).ToList();

    yearDDl.Insert(0, new SelectListModel { value = "Select", id = 0 });



    var monthDDL = Enumerable.Range(1, 12).
                            Select(i => new SelectListModel
                            {
                                id = i,
                                value = System.Globalization.CultureInfo.InvariantCulture.DateTimeFormat.GetMonthName(i)
                            }).ToList();

    monthDDL.Insert(0, new SelectListModel { value = "Select", id = 0 });

    Model.branchList.Insert(0, new SelectListModel { value = "Select", id = 0 });
    Model.employeeTypesList.Insert(0, new SelectListModel { value = "Select", id = 0 });
    Model.financialYearList.Insert(0, new SelectListModel { value = "Select", id = 0 });
}

<div class="row">
    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-6">
        <fieldset class="border p-2 col-md-12 col-xs-12 col-lg-12 col-xl-12">
            <legend style="font-size:1.3rem !important;" class="w-auto"></legend>
            <div class="form-group">
                <div class="row">
                    @Html.LabelFor(model => model.branchId, htmlAttributes: new { @class = "control-label col-lg-4 col-md-4 col-sm-12 col-xs-12 mb-2" })
                    <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12 mb-2">
                        @Html.DropDownListFor(model => model.branchId, new SelectList(Model.branchList, "id", "value"), new { @class = "custom-select", @onChange = "BranchChange(this)" })
                        @Html.ValidationMessageFor(model => model.branchId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="row">
                    @Html.LabelFor(model => model.financialYear, htmlAttributes: new { @class = "control-label col-lg-4 col-md-4 col-sm-12 col-xs-12 mb-2" })
                    <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12 mb-2">
                        @Html.DropDownListFor(model => model.financialYear, new SelectList(Model.financialYearList, "value", "value"), new { @class = "custom-select" })
                        @Html.ValidationMessage("finanicalYearRequired", "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="row">
                    @Html.LabelFor(model => model.salYear, htmlAttributes: new { @class = "control-label col-lg-4 col-md-4 col-sm-12 col-xs-12 mb-2" })

                    <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12 mb-2">
                        @Html.DropDownListFor(model => model.salYear, new SelectList(yearDDl, "id", "value"), new { @class = "custom-select" })
                        @Html.ValidationMessage("salYearRequired", "", new { @class = "text-danger" })
                        <span id="errorYearRequired" class="text-danger"></span>
                    </div>
                </div>

                <div class="row">
                    @Html.LabelFor(model => model.salMonth, htmlAttributes: new { @class = "control-label col-lg-4 col-md-4 col-sm-12 col-xs-12 mb-2" })

                    <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12 mb-2">
                        @Html.DropDownListFor(model => model.salMonth, new SelectList(monthDDL, "id", "value"), new { @class = "custom-select" })
                        @Html.ValidationMessage("salMonthRequired", "", new { @class = "text-danger" })
                        <span id="errorMonthRequired" class="text-danger"></span>
                    </div>
                </div>
                <fieldset class="border p-2 col-md-12 col-xs-12 col-lg-12 col-xl-12 mb-2">
                    <legend style="font-size:1.3rem !important;" class="w-auto">
                        @*@Html.RadioButton("PeriodsDetails", "DateRange", new { id = "rdbDateRange" })*@
                        @if (Model.dateRange)
                        {
                            @Html.RadioButtonFor(model => model.dateTypeRadio, DateTypeRadio.rbddateRange.ToString(), new { id = "rdbDateRange", @checked = true })
                        }
                        else
                        {
                            @Html.RadioButtonFor(model => model.dateTypeRadio, DateTypeRadio.rbddateRange.ToString(), new { id = "rdbDateRange" })
                        }
                        Date Range
                    </legend>
                    <div class="row">
                        @Html.LabelFor(model => model.fromMonth, htmlAttributes: new { @class = "control-label col-lg-2 col-md-2 col-sm-12 col-xs-12 mb-2" })
                        <div class="col-lg-4 col-md-4 col-sm-12 col-xs-12 mb-2">
                            @Html.DropDownListFor(model => model.fromMonth, new SelectList(monthDDL, "id", "value"), new { @class = "custom-select" })
                        </div>
                        @Html.LabelFor(model => model.toMonth, htmlAttributes: new { @class = "control-label col-lg-1 col-md-1 col-sm-12 col-xs-12 mb-2" })
                        <div class="col-lg-4 col-md-4 col-sm-12 col-xs-12 mb-2">
                            @Html.DropDownListFor(model => model.toMonth, new SelectList(monthDDL, "id", "value"), new { @class = "custom-select" })
                        </div>
                    </div>


                    @Html.ValidationMessage("dateRangeRequired", "", new { @class = "text-danger" })
                </fieldset>
                <div class="row">
                    @Html.LabelFor(model => model.employeeId, htmlAttributes: new { @class = "control-label col-lg-4 col-md-4 col-sm-12 col-xs-12 mb-2" })

                    <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12 mb-2">
                        @Html.DropDownListFor(model => model.employeeId, new SelectList(Model.employeeList, "id", "value"), new { @class = "custom-select", @disabled = "disabled" })
                        @Html.ValidationMessage("EmployeeIdRequired", "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row">
                    @Html.LabelFor(model => model.selectedEmployeeTypeID, htmlAttributes: new { @class = "control-label col-lg-4 col-md-4 col-sm-12 col-xs-12 mb-2" })

                    <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12 mb-2">
                        @Html.DropDownListFor(model => model.selectedEmployeeTypeID, new SelectList(Model.employeeTypesList, "id", "value"), new { @class = "custom-select" })
                        @*@Html.ValidationMessage("employeeTypeRequired", "", new { @class = "text-danger" })*@
                    </div>
                </div>
            </div>
        </fieldset>
        <br />
        <fieldset class="border p-2 col-md-12 col-xs-12 col-lg-12 col-xl-12">
            <legend style="font-size:1.3rem !important;" class="w-auto"></legend>
            <div class="row">
                @Html.LabelFor(model => model.AllBranch, new { @class = "control-label col-lg-3 col-md-3 col-sm-12 col-xs-12 mb-2" })
                @if (Model.AllBranch == false)
                {
                    <div class="col-lg-3 col-md-3 col-sm-12 col-xs-12 mb-4">
                        <label class="switch">
                            @Html.CheckBoxFor(model => model.AllBranch, new { @class = "form-control", @onChange = "checkboxChange(this)" })
                            <div class="slider round">
                            </div>
                        </label>
                    </div>
                }
                else
                {
                    <div class="col-lg-3 col-md-3 col-sm-12 col-xs-12 mb-4">
                        <label class="switch">
                            @Html.CheckBoxFor(model => model.AllBranch, new { @class = "form-control", @checked = "checked", @onChange = "checkboxChange(this)" })
                            <div class="slider round">
                            </div>
                        </label>
                    </div>
                }

                @Html.LabelFor(model => model.AllEmployee, new { @class = "control-label col-lg-3 col-md-3 col-sm-12 col-xs-12 mb-2" })

                @if (Model.AllEmployee == false)
                {

                    <div class="col-lg-3 col-md-3 col-sm-12 col-xs-12 mb-4">
                        <label class="switch">
                            @Html.CheckBoxFor(model => model.AllEmployee, new { @class = "form-control", @onChange = "checkboxChange(this)", @disabled = "disabled" })
                            <div class="slider round">
                            </div>
                        </label>
                    </div>
                }
                else
                {
                    <div class="col-lg-3 col-md-3 col-sm-12 col-xs-12 mb-4">
                        <label class="switch">
                            @Html.CheckBoxFor(model => model.AllEmployee, new { @class = "form-control", @checked = "checked", @onChange = "checkboxChange(this)" })
                            <div class="slider round">
                            </div>
                        </label>
                    </div>
                }
            </div>
        </fieldset>


    </div>
    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-6">
        <fieldset class="border p-2 col-md-12 col-xs-12 col-lg-12 col-xl-12">
            <legend style="font-size:1.3rem !important;" class="w-auto"></legend>
            <div class="form-group">
                <div class="row">
                    <div class="col-lg-1 col-md-1 col-sm-1 col-xs-1">
                        @Html.RadioButtonFor(model => model.pfLoanReportRadio, PFLoanReportRadio.MPFStatement.ToString(), new { id = "MPFStatement", @onChange = "rbtChange(this)" })
                    </div>
                    @Html.Label(PFLoanReportRadio.MPFStatement.GetDisplayName().ToString(), htmlAttributes: new { @class = "control-label col-lg-10 col-md-10 col-sm-12 col-xs-12 mb-2", @for = PFLoanReportRadio.MPFStatement.ToString() })
                </div>
                <div class="row">
                    <div class="col-lg-1 col-md-1 col-sm-1 col-xs-1">
                        @Html.RadioButtonFor(model => model.pfLoanReportRadio, PFLoanReportRadio.MPFLDSatement.ToString(), new { id = "MPFLDSatement", @onChange = "rbtChange(this)" })
                    </div>
                    @Html.Label(PFLoanReportRadio.MPFLDSatement.GetDisplayName().ToString(), htmlAttributes: new { @class = "control-label col-lg-10 col-md-10 col-sm-12 col-xs-12 mb-2", @for = PFLoanReportRadio.MPFLDSatement.ToString() })
                </div>
                <div class="row">
                    <div class="col-lg-1 col-md-1 col-sm-1 col-xs-1">
                        @Html.RadioButtonFor(model => model.pfLoanReportRadio, PFLoanReportRadio.MPDSummary.ToString(), new { id = "MPDSummary", @onChange = "rbtChange(this)" })
                    </div>
                    @Html.Label(PFLoanReportRadio.MPDSummary.GetDisplayName().ToString(), htmlAttributes: new { @class = "control-label col-lg-10 col-md-10 col-sm-12 col-xs-12 mb-2", @for = PFLoanReportRadio.MPDSummary.ToString() })
                </div>
                <div class="row">
                    <div class="col-lg-1 col-md-1 col-sm-1 col-xs-1">
                        @Html.RadioButtonFor(model => model.pfLoanReportRadio, PFLoanReportRadio.LOERefundable.ToString(), new { id = "LOERefundable", @onChange = "rbtChange(this)" })
                    </div>
                    @Html.Label(PFLoanReportRadio.LOERefundable.GetDisplayName().ToString(), htmlAttributes: new { @class = "control-label col-lg-10 col-md-10 col-sm-12 col-xs-12 mb-2", @for = PFLoanReportRadio.LOERefundable.ToString() })
                </div>

                <div class="row">
                    <div class="col-lg-1 col-md-1 col-sm-1 col-xs-1">
                        @Html.RadioButtonFor(model => model.pfLoanReportRadio, PFLoanReportRadio.LOENonRefundable.ToString(), new { id = "LOENonRefundable", @onChange = "rbtChange(this)" })
                    </div>
                    @Html.Label(PFLoanReportRadio.LOENonRefundable.GetDisplayName().ToString(), htmlAttributes: new { @class = "control-label col-lg-10 col-md-10 col-sm-12 col-xs-12 mb-2", @for = PFLoanReportRadio.LOENonRefundable.ToString() })
                </div>

                <div class="row">
                    <div class="col-lg-1 col-md-1 col-sm-1 col-xs-1">
                        @Html.RadioButtonFor(model => model.pfLoanReportRadio, PFLoanReportRadio.LOERefundableFinished.ToString(), new { id = "LOERefundableFinished", @onChange = "rbtChange(this)" })
                    </div>
                    @Html.Label(PFLoanReportRadio.LOERefundableFinished.GetDisplayName().ToString(), htmlAttributes: new { @class = "control-label col-lg-10 col-md-10 col-sm-12 col-xs-12 mb-2", @for = PFLoanReportRadio.LOERefundableFinished.ToString() })
                </div>

                <div class="row">
                    <div class="col-lg-1 col-md-1 col-sm-1 col-xs-1">
                        @Html.RadioButtonFor(model => model.pfLoanReportRadio, PFLoanReportRadio.MPFLLedger.ToString(), new { id = "MPFLLedger", @onChange = "rbtChange(this)" })
                    </div>
                    @Html.Label(PFLoanReportRadio.MPFLLedger.GetDisplayName().ToString(), htmlAttributes: new { @class = "control-label col-lg-10 col-md-10 col-sm-12 col-xs-12 mb-2", @for = PFLoanReportRadio.MPFLLedger.ToString() })
                </div>

                <div class="row">
                    <div class="col-lg-1 col-md-1 col-sm-1 col-xs-1">
                        @Html.RadioButtonFor(model => model.pfLoanReportRadio, PFLoanReportRadio.PFChecklist.ToString(), new { id = "PFChecklist", @onChange = "rbtChange(this)" })
                    </div>
                    @Html.Label(PFLoanReportRadio.PFChecklist.GetDisplayName().ToString(), htmlAttributes: new { @class = "control-label col-lg-10 col-md-10 col-sm-12 col-xs-12 mb-2", @for = PFLoanReportRadio.PFChecklist.ToString() })
                </div>

                <div class="row">
                    <div class="col-lg-1 col-md-1 col-sm-1 col-xs-1">
                        @Html.RadioButtonFor(model => model.pfLoanReportRadio, PFLoanReportRadio.PFNSummary.ToString(), new { id = "PFNSummary", @onChange = "rbtChange(this)" })
                    </div>
                    @Html.Label(PFLoanReportRadio.PFNSummary.GetDisplayName().ToString(), htmlAttributes: new { @class = "control-label col-lg-10 col-md-10 col-sm-12 col-xs-12 mb-2", @for = PFLoanReportRadio.PFNSummary.ToString() })
                </div>

                @*<div class="row">
                        <div class="col-lg-1 col-md-1 col-sm-1 col-xs-1">
                            @Html.RadioButtonFor(model => model.pfLoanReportRadio, PFLoanReportRadio.PFLLIAdjust.ToString(), new { id = "PFLLIAdjust" })
                        </div>
                        @Html.Label(PFLoanReportRadio.PFLLIAdjust.GetDisplayName().ToString(), htmlAttributes: new { @class = "control-label col-lg-10 col-md-10 col-sm-12 col-xs-12 mb-2", @for = PFLoanReportRadio.PFLLIAdjust.ToString() })
                    </div>*@

                @*<div class="row">
                        <div class="col-lg-1 col-md-1 col-sm-1 col-xs-1">
                            @Html.RadioButtonFor(model => model.pfLoanReportRadio, PFLoanReportRadio.PFLTRecovered.ToString(), new { id = "PFLTRecovered" })
                        </div>
                        @Html.Label(PFLoanReportRadio.PFLTRecovered.GetDisplayName().ToString(), htmlAttributes: new { @class = "control-label col-lg-10 col-md-10 col-sm-12 col-xs-12 mb-2", @for = PFLoanReportRadio.PFLTRecovered.ToString() })
                    </div>*@

                @*<div class="row">
                        <div class="col-lg-1 col-md-1 col-sm-1 col-xs-1">
                            @Html.RadioButtonFor(model => model.pfLoanReportRadio, PFLoanReportRadio.PFLPPayment.ToString(), new { id = "PFLPPayment" })
                        </div>
                        @Html.Label(PFLoanReportRadio.PFLPPayment.GetDisplayName().ToString(), htmlAttributes: new { @class = "control-label col-lg-10 col-md-10 col-sm-12 col-xs-12 mb-2", @for = PFLoanReportRadio.PFLPPayment.ToString() })
                    </div>*@

                @*<div class="row">
                        <div class="col-lg-1 col-md-1 col-sm-1 col-xs-1">
                            @Html.RadioButtonFor(model => model.pfLoanReportRadio, PFLoanReportRadio.PFLOAdjustment.ToString(), new { id = "PFLOAdjustment" })
                        </div>
                        @Html.Label(PFLoanReportRadio.PFLOAdjustment.GetDisplayName().ToString(), htmlAttributes: new { @class = "control-label col-lg-10 col-md-10 col-sm-12 col-xs-12 mb-2", @for = PFLoanReportRadio.PFLOAdjustment.ToString() })
                    </div>*@

                <div class="row d-none">
                    <div class="col-lg-1 col-md-1 col-sm-1 col-xs-1">
                        @Html.RadioButtonFor(model => model.pfLoanReportRadio, PFLoanReportRadio.ECRReport.ToString(), new { id = "ECRReport", @onChange = "rbtChange(this)" })
                    </div>
                    @Html.Label(PFLoanReportRadio.ECRReport.GetDisplayName().ToString(), htmlAttributes: new { @class = "control-label col-lg-10 col-md-10 col-sm-12 col-xs-12 mb-2", @for = PFLoanReportRadio.ECRReport.ToString() })
                </div>
                <div class="row mt-4 mb-5" id="divIsPF" style="display:none;">
                    <div class="col-6">
                        <label class="control-label"><b>PF number allotted</b></label>
                    </div>
                    <div class="col-6">
                        <label class="switch">
                            @Html.CheckBoxFor(model => model.IsPfNo, new { @class = "form-control", @checked = "checked" })
                            <div class="slider round">
                            </div>
                        </label>
                    </div>
                </div>

                @*<div class="row">
                        <div class="col-lg-1 col-md-1 col-sm-1 col-xs-1">
                            @Html.RadioButtonFor(model => model.pfLoanReportRadio, PFLoanReportRadio.DReport.ToString(), new { id = "DReport" })
                        </div>
                        @Html.Label(PFLoanReportRadio.DReport.GetDisplayName().ToString(), htmlAttributes: new { @class = "control-label col-lg-10 col-md-10 col-sm-12 col-xs-12 mb-2", @for = PFLoanReportRadio.DReport.ToString() })
                    </div>*@

                @*<div class="row">
                        <div class="col-lg-1 col-md-1 col-sm-1 col-xs-1">
                            @Html.RadioButtonFor(model => model.pfLoanReportRadio, PFLoanReportRadio.IDReport.ToString(), new { id = "IDReport" })
                        </div>
                        @Html.Label(PFLoanReportRadio.IDReport.GetDisplayName().ToString(), htmlAttributes: new { @class = "control-label col-lg-10 col-md-10 col-sm-12 col-xs-12 mb-2", @for = PFLoanReportRadio.IDReport.ToString() })
                    </div>*@
                <br />
                <span class="pull-left">
                    <input type="submit" id="linePrinter" value="Line Printer" class="btn btn-info btn-md pull-center toggle-tooltip hide" title="" name="ButtonType" />
                    <input type="submit" value="Print" id="btnsubmit" class="btn btn-info btn-md pull-center toggle-tooltip" title="Click here, to save current record" name="ButtonType" />
                    <input type="button" value="Print" id="btnexport" onclick="btnClick();" class="btn btn-info btn-md pull-center toggle-tooltip" title="Click here, to save current record" name="ButtonType" />

                </span>
            </div>
        </fieldset>
    </div>
</div>

<script type="text/javascript">
    $(function () {
        debugger;
        $('#btnexport').addClass('hide');
        if ($('#MPDSummary').prop("checked") == true) {

            $('#AllEmployee').removeAttr("disabled");
            //  $("#AllBranch").attr("disabled", "disabled");
        }
    }
        );
    function rbtChange(check) {
        debugger;
        if (check.id == 'MPFStatement' || check.id == 'MPDSummary') {
            $("#divIsPF").css("display", "block");
        }
        else {
            $("#divIsPF").css("display", "none");
        }
        if (check.id == 'ECRReport') {
            $('#btnsubmit').addClass('hide')
            $('#btnexport').removeClass('hide')
        }
        else {
            $('#btnsubmit').removeClass('hide')
            $('#btnexport').addClass('hide')
        }

        if (check.id == 'MPDSummary') {
            $('#rdbDateRange').prop('checked', true);
            $('#branchId').removeAttr("disabled");
            // $("#AllBranch").attr("disabled", "disabled");
            $('#AllEmployee').removeAttr("disabled");
        }
        else {
            $('#rdbDateRange').prop('checked', false);
            $("#AllBranch").removeAttr("disabled");
            $('#AllEmployee').attr("disabled", "disabled");
            $('#employeeId').attr("disabled", "disabled");
        }
    }
    function checkboxChange(check) {
        debugger;
        if (check.id == 'AllBranch') {
            if (check.checked) {

                $("#branchId").attr("disabled", "disabled");
            }
            else {
                $("#branchId").removeAttr("disabled");
            }
        }

        if (check.id == 'AllEmployee') {
            if (check.checked) {

                $("#employeeId").attr("disabled", "disabled");
            }
            else {
                $("#employeeId").removeAttr("disabled");
            }
        }

    }
    function btnClick() {
        debugger;
        var month = $("#salMonth").val();
        var year = $("#salYear").val();
        $('#errorMonthRequired').html('');
        $('#errorYearRequired').html('');
        if (month == '0') {
            $("#errorMonthRequired").html("Please Select Month.").css("color", "red");

        }
        if (year == '0') {
            $("#errorYearRequired").html("Please Select Year.").css("color", "red");

        }
        if (month == 0 || year == 0)
            return false;


        var url = "@Url.Action("ECRExport", "PFLoanReport")";
        $.post(url, { 'salMonth': month, 'salYear': year }).done(function (data) {
        });
    }

    function BranchChange(cntrl) {
        debugger;
        var branchId = 0;
        branchId = $(cntrl).val();

        jQuery.post("@Url.Action("GetEmployeeByBranch", "YearlyReport")", {
            brnId: branchId
        }).done(function (data) {
            $('#employeeId').html("");
            $.each(data.emp, function (key, value) {
                $('#employeeId').append($("<option></option>").val(value.Value).html(value.Text));
            });
        });
    }
</script>