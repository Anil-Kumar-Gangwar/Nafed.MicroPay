@using Nafed.MicroPay.Model;
@using MicroPay.Web.Models;
@model TrainerDtlsViewModel

@{

    Layout = null;
    var message = TempData["Message"] == null ? "" : TempData["Message"].ToString();
    var messageError = TempData["Error"] == null ? "" : TempData["Error"].ToString();
    var panelVisibilityClass = Model.BothTrainer ? null : "hide";
}

<script type="text/javascript">

    $(function () {

        $('input[type=radio][name=enumTrainerType]').change(function () {
            var checkedRadio = this.value;  //alert(checkedRadio);
            if (checkedRadio == "Both")
                $("#panel1,#panel2").removeClass("hide");
            else {
                $("#panel1").addClass("hide");
                $("#panel2").removeClass("hide");
            }

        });
    });

    function EditSuccess(data) {

        if (data.part == 1)
            $("#div-trainer-grid").html(data.htmlData);
        else if (data.part == 2)
            $("#Tab3").html(data.htmlData);

        else if (data.part == undefined) {

            $('.nav-tabs li:eq(0) a').tab('show');
            commonMessage(data.msgType, data.msg);
        }
    }

</script>

@using (Ajax.BeginForm("_EditTrainerDetails", "Training", new AjaxOptions { HttpMethod = "POST", OnSuccess = "EditSuccess" }, new { defaultbutton = "submitform" }))
{
    @Html.HiddenFor(model => Model.TrainingID)

    <div class="" style="margin-top:10px;">

        <div class="">

            <div class="row">

                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 mb-12">

                    <div class="form-group">

                        <div class="row">

                            @*<div class="col-lg-2 col-md-2 col-sm-12 col-xs-12">

                                    @Html.LabelFor(model => model.enumTrainingType, htmlAttributes: new { @class = "control-label required" })

                                </div>

                                <div class="col-lg-4 col-md-4 col-sm-12 col-xs-12">

                                    <div class="container-fluid">

                                        <div class="custom-control custom-radio">

                                            @Html.RadioButtonFor(model => model.enumTrainingType, "Orientation", new { id = "Orientation" })
                                            @Html.LabelFor(model => model.OrientationTraining, new { @for = "Orientation" })

                                            <br />
                                            @Html.RadioButtonFor(model => model.enumTrainingType, "OnBoard", new { id = "OnBoard" })
                                            @Html.LabelFor(model => model.OnBoardTraining, new { @for = "OnBoard" })

                                            <br />
                                            @Html.ValidationMessageFor(m => Model.enumTrainingType, "", new { @class = "text-danger" })

                                        </div>
                                    </div>

                                </div>*@

                            <div class="col-lg-2 col-md-2 col-sm-12 col-xs-12">

                                @Html.LabelFor(model => model.enumTrainerType, htmlAttributes: new { @class = "control-label required" })

                            </div>

                            <div class="col-lg-4 col-md-4 col-sm-12 col-xs-12">

                                <div class="container-fluid">

                                    <div class="custom-control custom-radio">

                                        @Html.RadioButtonFor(model => model.enumTrainerType, "Internal", new { id = "Internal" })
                                        @Html.LabelFor(model => model.InternalTrainer, new { @for = "Internal" })

                                      
                                        @Html.RadioButtonFor(model => model.enumTrainerType, "External", new { id = "External" })
                                        @Html.LabelFor(model => model.ExternalTrainer, new { @for = "External" })

                                        @Html.RadioButtonFor(model => model.enumTrainerType, "Both", new { id = "Both" })
                                        @Html.LabelFor(model => model.BothTrainer, new { @for = "Both" })
                                        <br />
                                        @Html.ValidationMessageFor(m => Model.enumTrainerType, "", new { @class = "text-danger" })

                                    </div>
                                </div>

                            </div>

                        </div>
                    </div>

                    <div id="panel1" class="panel panel-default @panelVisibilityClass">

                        <div class="panel-heading">Vendor Detail</div>

                        <div class="panel-body">

                            <div class="form-group">

                                <div class="row">

                                    <div class="col-xl-2 col-lg-2 col-md-2 col-sm-12 col-xs-12">

                                        @Html.LabelFor(model => model.DirectorName, htmlAttributes: new { @class = "control-label required" })

                                    </div>

                                    <div class="col-xl-4 col-lg-4 col-md-4 col-sm-12 col-xs-12">

                                        @Html.EditorFor(model => Model.DirectorName, new { htmlAttributes = new { @class = "form-control", @maxlength = "150" } })
                                        @Html.ValidationMessageFor(m => Model.DirectorName, "", new { @class = "text-danger" })

                                    </div>
                                    <div class="col-xl-2 col-lg-2 col-md-2 col-sm-12 col-xs-12">

                                        @Html.LabelFor(model => model.VendorName, htmlAttributes: new { @class = "control-label required" })

                                    </div>

                                    <div class="col-xl-4 col-lg-4 col-md-4 col-sm-12 col-xs-12">

                                        @Html.EditorFor(model => Model.VendorName, new { htmlAttributes = new { @class = "form-control", @maxlength = "150" } })
                                        @Html.ValidationMessageFor(m => Model.VendorName, "", new { @class = "text-danger" })

                                    </div>
                                    <div>
                                    </div>

                                </div>

                            </div>

                            <div class="form-group">

                                <div class="row">

                                    <div class="col-xl-2 col-lg-2 col-md-2 col-sm-12 col-xs-12">

                                        @Html.LabelFor(model => model.VendorPhoneNo, htmlAttributes: new { @class = "control-label" })

                                    </div>

                                    <div class="col-xl-4 col-lg-4 col-md-4 col-sm-12 col-xs-12">

                                        @Html.EditorFor(model => Model.VendorPhoneNo, new { htmlAttributes = new { @class = "form-control", @maxlength = "12" } })
                                        @Html.ValidationMessageFor(m => Model.VendorPhoneNo, "", new { @class = "text-danger" })

                                    </div>

                                    <div class="col-xl-2 col-lg-2 col-md-2 col-sm-12 col-xs-12">

                                        @Html.LabelFor(model => model.VendorGSTINNo, htmlAttributes: new { @class = "control-label" })

                                    </div>

                                    <div class="col-xl-4 col-lg-4 col-md-4 col-sm-12 col-xs-12">

                                        @Html.EditorFor(model => Model.VendorGSTINNo, new { htmlAttributes = new { @class = "form-control", @maxlength = "15" } })
                                        @*@Html.ValidationMessageFor(m => Model.VendorGSTINNo, "", new { @class = "text-danger" })*@
                                    </div>
                                    <div>
                                    </div>

                                </div>

                            </div>

                            <div class="form-group">

                                <div class="row">


                                    <div class="col-xl-2 col-lg-2 col-md-2 col-sm-12 col-xs-12">

                                        @Html.LabelFor(model => model.VendorAddress, htmlAttributes: new { @class = "control-label required" })

                                    </div>

                                    <div class="col-xl-4 col-lg-4 col-md-4 col-sm-12 col-xs-12">

                                        @Html.TextAreaFor(model => model.VendorAddress, new { @class = "form-control", @maxlength = "1000", @style = "min-height:100px;max-height:100px;width:100%;", @cols = "50", @rows = "10" })
                                        @Html.ValidationMessageFor(m => Model.VendorAddress, "", new { @class = "text-danger" })

                                    </div>

                                    <div>

                                    </div>

                                </div>

                            </div>
                        </div>
                    </div>


                    @if (Model.InternalTrainer || Model.ExternalTrainer)
                    {
                        panelVisibilityClass = null;
                    }
                    <div id="panel2" class="panel panel-default @panelVisibilityClass">

                        <div class="panel-heading">Trainer List</div>

                        <div class="panel-body">

                            <div class="row mb-3 text-right">

                                <div class="col-md-12 pull-right">

                                    <input type="submit" value="Add Row" name="ButtonType"
                                           class="btn btn-info btn-md pull-center toggle-tooltip btn-sectionAddRow" title="Click here, to add new row." />
                                </div>
                            </div>
                            <div id="div-trainer-grid">
                                @Html.Partial("_TrainerList", Model)
                            </div>

                        </div>
                    </div>

                    <div class="form-group">

                        @if (Model.enumTrainingStatus != EnumTrainingStatus.Completed && Model.enumTrainingStatus != EnumTrainingStatus.Cancel && Model.enumTrainingStatus != EnumTrainingStatus.Reschedule)
                        {
                            <span class="pull-right">

                                @*@Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-light btn-md toggle-tooltip", @title = "Click here, to redirect on list page" })*@
                                <input type="submit" name="ButtonType" value="Update" class="btn btn-info btn-md pull-center toggle-tooltip" title="Click here, to update this record" />
                            </span>
                        }
                    </div>

                </div>

            </div>

        </div>

    </div>
}